// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../jquery

declare module 'gd-bs' {
    import * as Components from "gd-bs/components";
    import { Icons, IconTypes } from "gd-bs/icons";
    import * as jQuery from "jquery";
    export {
        Components,
        Icons, IconTypes,
        jQuery
    }
}

declare module 'gd-bs/components' {
    export * from "gd-bs/components/accordion";
    export * from "gd-bs/components/alert";
    export * from "gd-bs/components/badge";
    export * from "gd-bs/components/breadcrumb";
    export * from "gd-bs/components/button";
    export * from "gd-bs/components/buttonGroup";
    export * from "gd-bs/components/card";
    export * from "gd-bs/components/cardGroup";
    export * from "gd-bs/components/carousel";
    export * from "gd-bs/components/checkboxGroup";
    export * from "gd-bs/components/collapse";
    export * from "gd-bs/components/dropdown";
    export * from "gd-bs/components/form";
    export * from "gd-bs/components/formControl";
    export * from "gd-bs/components/inputGroup";
    export * from "gd-bs/components/jumbotron";
    export * from "gd-bs/components/listBox";
    export * from "gd-bs/components/listGroup";
    export * from "gd-bs/components/modal";
    export * from "gd-bs/components/nav";
    export * from "gd-bs/components/navbar";
    export * from "gd-bs/components/pagination";
    export * from "gd-bs/components/panel";
    export * from "gd-bs/components/popover";
    export * from "gd-bs/components/progress";
    export * from "gd-bs/components/progressGroup";
    export * from "gd-bs/components/spinner";
    export * from "gd-bs/components/table";
    export * from "gd-bs/components/toast";
    export * from "gd-bs/components/toolbar";
    export * from "gd-bs/components/tooltip";
}

declare module 'gd-bs/icons' {
    
    /**
      * ### Icons
      * 
      * Renders an icon by type
      * 
      * ```ts
      * import { Icons, IconTypes } from "gd-sprest-bs";
      * 
      * // Create the icon and append it to the target element
      * let elIcon = Icons(IconTypes.Alarm, 32, 32);
      * document.querySelector("#icon").appendChild(elIcon);
      * ```
      */
    export const Icons: (iconType:number, height?:number, width?:number) => HTMLElement;
    
    /**
      * Icon Types
     */
    export const IconTypes: {
        // alarm-fill.svg
        AlarmFill: number;
        // alarm.svg
        Alarm: number;
        // alt.svg
        Alt: number;
        // app-indicator.svg
        AppIndicator: number;
        // app.svg
        App: number;
        // archive-fill.svg
        ArchiveFill: number;
        // archive.svg
        Archive: number;
        // arrow-90deg-down.svg
        Arrow90degDown: number;
        // arrow-90deg-left.svg
        Arrow90degLeft: number;
        // arrow-90deg-right.svg
        Arrow90degRight: number;
        // arrow-90deg-up.svg
        Arrow90degUp: number;
        // arrow-bar-down.svg
        ArrowBarDown: number;
        // arrow-bar-left.svg
        ArrowBarLeft: number;
        // arrow-bar-right.svg
        ArrowBarRight: number;
        // arrow-bar-up.svg
        ArrowBarUp: number;
        // arrow-clockwise.svg
        ArrowClockwise: number;
        // arrow-counterclockwise.svg
        ArrowCounterclockwise: number;
        // arrow-down-left.svg
        ArrowDownLeft: number;
        // arrow-down-right.svg
        ArrowDownRight: number;
        // arrow-down-short.svg
        ArrowDownShort: number;
        // arrow-down.svg
        ArrowDown: number;
        // arrow-left-right.svg
        ArrowLeftRight: number;
        // arrow-left-short.svg
        ArrowLeftShort: number;
        // arrow-left.svg
        ArrowLeft: number;
        // arrow-repeat.svg
        ArrowRepeat: number;
        // arrow-return-left.svg
        ArrowReturnLeft: number;
        // arrow-return-right.svg
        ArrowReturnRight: number;
        // arrow-right-short.svg
        ArrowRightShort: number;
        // arrow-right.svg
        ArrowRight: number;
        // arrow-up-down.svg
        ArrowUpDown: number;
        // arrow-up-left.svg
        ArrowUpLeft: number;
        // arrow-up-right.svg
        ArrowUpRight: number;
        // arrow-up-short.svg
        ArrowUpShort: number;
        // arrow-up.svg
        ArrowUp: number;
        // arrows-angle-contract.svg
        ArrowsAngleContract: number;
        // arrows-angle-expand.svg
        ArrowsAngleExpand: number;
        // arrows-collapse.svg
        ArrowsCollapse: number;
        // arrows-expand.svg
        ArrowsExpand: number;
        // arrows-fullscreen.svg
        ArrowsFullscreen: number;
        // arrows-move.svg
        ArrowsMove: number;
        // aspect-ratio-fill.svg
        AspectRatioFill: number;
        // aspect-ratio.svg
        AspectRatio: number;
        // at.svg
        At: number;
        // award-fill.svg
        AwardFill: number;
        // award.svg
        Award: number;
        // backspace-fill.svg
        BackspaceFill: number;
        // backspace-reverse-fill.svg
        BackspaceReverseFill: number;
        // backspace-reverse.svg
        BackspaceReverse: number;
        // backspace.svg
        Backspace: number;
        // bag-fill.svg
        BagFill: number;
        // bag.svg
        Bag: number;
        // bar-chart-fill.svg
        BarChartFill: number;
        // bar-chart.svg
        BarChart: number;
        // battery-charging.svg
        BatteryCharging: number;
        // battery-full.svg
        BatteryFull: number;
        // battery-half.svg
        BatteryHalf: number;
        // battery.svg
        Battery: number;
        // bell-fill.svg
        BellFill: number;
        // bell.svg
        Bell: number;
        // blockquote-left.svg
        BlockquoteLeft: number;
        // blockquote-right.svg
        BlockquoteRight: number;
        // book-half.svg
        BookHalf: number;
        // book.svg
        Book: number;
        // bookmark-check.svg
        BookmarkCheck: number;
        // bookmark-dash.svg
        BookmarkDash: number;
        // bookmark-fill.svg
        BookmarkFill: number;
        // bookmark-plus.svg
        BookmarkPlus: number;
        // bookmark.svg
        Bookmark: number;
        // bookmarks-fill.svg
        BookmarksFill: number;
        // bookmarks.svg
        Bookmarks: number;
        // bootstrap-fill.svg
        BootstrapFill: number;
        // bootstrap-reboot.svg
        BootstrapReboot: number;
        // bootstrap.svg
        Bootstrap: number;
        // bounding-box-circles.svg
        BoundingBoxCircles: number;
        // bounding-box.svg
        BoundingBox: number;
        // box-arrow-down-left.svg
        BoxArrowDownLeft: number;
        // box-arrow-down-right.svg
        BoxArrowDownRight: number;
        // box-arrow-down.svg
        BoxArrowDown: number;
        // box-arrow-in-down-left.svg
        BoxArrowInDownLeft: number;
        // box-arrow-in-down-right.svg
        BoxArrowInDownRight: number;
        // box-arrow-in-down.svg
        BoxArrowInDown: number;
        // box-arrow-in-left.svg
        BoxArrowInLeft: number;
        // box-arrow-in-right.svg
        BoxArrowInRight: number;
        // box-arrow-in-up-left.svg
        BoxArrowInUpLeft: number;
        // box-arrow-in-up-right.svg
        BoxArrowInUpRight: number;
        // box-arrow-in-up.svg
        BoxArrowInUp: number;
        // box-arrow-left.svg
        BoxArrowLeft: number;
        // box-arrow-right.svg
        BoxArrowRight: number;
        // box-arrow-up-left.svg
        BoxArrowUpLeft: number;
        // box-arrow-up-right.svg
        BoxArrowUpRight: number;
        // box-arrow-up.svg
        BoxArrowUp: number;
        // braces.svg
        Braces: number;
        // briefcase-fill.svg
        BriefcaseFill: number;
        // briefcase.svg
        Briefcase: number;
        // brightness-alt-high-fill.svg
        BrightnessAltHighFill: number;
        // brightness-alt-high.svg
        BrightnessAltHigh: number;
        // brightness-alt-low-fill.svg
        BrightnessAltLowFill: number;
        // brightness-alt-low.svg
        BrightnessAltLow: number;
        // brightness-high-fill.svg
        BrightnessHighFill: number;
        // brightness-high.svg
        BrightnessHigh: number;
        // brightness-low-fill.svg
        BrightnessLowFill: number;
        // brightness-low.svg
        BrightnessLow: number;
        // brush.svg
        Brush: number;
        // bucket-fill.svg
        BucketFill: number;
        // bucket.svg
        Bucket: number;
        // building.svg
        Building: number;
        // bullseye.svg
        Bullseye: number;
        // calendar-fill.svg
        CalendarFill: number;
        // calendar.svg
        Calendar: number;
        // camera-video-fill.svg
        CameraVideoFill: number;
        // camera-video.svg
        CameraVideo: number;
        // camera.svg
        Camera: number;
        // capslock-fill.svg
        CapslockFill: number;
        // capslock.svg
        Capslock: number;
        // card-checklist.svg
        CardChecklist: number;
        // card-heading.svg
        CardHeading: number;
        // card-image.svg
        CardImage: number;
        // card-list.svg
        CardList: number;
        // card-text.svg
        CardText: number;
        // caret-down-fill.svg
        CaretDownFill: number;
        // caret-down.svg
        CaretDown: number;
        // caret-left-fill.svg
        CaretLeftFill: number;
        // caret-left.svg
        CaretLeft: number;
        // caret-right-fill.svg
        CaretRightFill: number;
        // caret-right.svg
        CaretRight: number;
        // caret-up-fill.svg
        CaretUpFill: number;
        // caret-up.svg
        CaretUp: number;
        // chat-dots-fill.svg
        ChatDotsFill: number;
        // chat-dots.svg
        ChatDots: number;
        // chat-fill.svg
        ChatFill: number;
        // chat-quote-fill.svg
        ChatQuoteFill: number;
        // chat-quote.svg
        ChatQuote: number;
        // chat-square-dots-fill.svg
        ChatSquareDotsFill: number;
        // chat-square-dots.svg
        ChatSquareDots: number;
        // chat-square-fill.svg
        ChatSquareFill: number;
        // chat-square-quote-fill.svg
        ChatSquareQuoteFill: number;
        // chat-square-quote.svg
        ChatSquareQuote: number;
        // chat-square.svg
        ChatSquare: number;
        // chat.svg
        Chat: number;
        // check-all.svg
        CheckAll: number;
        // check-box.svg
        CheckBox: number;
        // check-circle.svg
        CheckCircle: number;
        // check.svg
        Check: number;
        // chevron-bar-contract.svg
        ChevronBarContract: number;
        // chevron-bar-down.svg
        ChevronBarDown: number;
        // chevron-bar-expand.svg
        ChevronBarExpand: number;
        // chevron-bar-left.svg
        ChevronBarLeft: number;
        // chevron-bar-right.svg
        ChevronBarRight: number;
        // chevron-bar-up.svg
        ChevronBarUp: number;
        // chevron-compact-down.svg
        ChevronCompactDown: number;
        // chevron-compact-left.svg
        ChevronCompactLeft: number;
        // chevron-compact-right.svg
        ChevronCompactRight: number;
        // chevron-compact-up.svg
        ChevronCompactUp: number;
        // chevron-contract.svg
        ChevronContract: number;
        // chevron-double-down.svg
        ChevronDoubleDown: number;
        // chevron-double-left.svg
        ChevronDoubleLeft: number;
        // chevron-double-right.svg
        ChevronDoubleRight: number;
        // chevron-double-up.svg
        ChevronDoubleUp: number;
        // chevron-down.svg
        ChevronDown: number;
        // chevron-expand.svg
        ChevronExpand: number;
        // chevron-left.svg
        ChevronLeft: number;
        // chevron-right.svg
        ChevronRight: number;
        // chevron-up.svg
        ChevronUp: number;
        // circle-fill.svg
        CircleFill: number;
        // circle-half.svg
        CircleHalf: number;
        // circle-square.svg
        CircleSquare: number;
        // circle.svg
        Circle: number;
        // clipboard-data.svg
        ClipboardData: number;
        // clipboard.svg
        Clipboard: number;
        // clock-fill.svg
        ClockFill: number;
        // clock-history.svg
        ClockHistory: number;
        // clock.svg
        Clock: number;
        // cloud-download.svg
        CloudDownload: number;
        // cloud-fill.svg
        CloudFill: number;
        // cloud-upload.svg
        CloudUpload: number;
        // cloud.svg
        Cloud: number;
        // code-slash.svg
        CodeSlash: number;
        // code.svg
        Code: number;
        // collection-fill.svg
        CollectionFill: number;
        // collection-play-fill.svg
        CollectionPlayFill: number;
        // collection-play.svg
        CollectionPlay: number;
        // collection.svg
        Collection: number;
        // columns-gap.svg
        ColumnsGap: number;
        // columns.svg
        Columns: number;
        // command.svg
        Command: number;
        // compass.svg
        Compass: number;
        // cone-striped.svg
        ConeStriped: number;
        // cone.svg
        Cone: number;
        // controller.svg
        Controller: number;
        // credit-card.svg
        CreditCard: number;
        // crop.svg
        Crop: number;
        // cursor-fill.svg
        CursorFill: number;
        // cursor-text.svg
        CursorText: number;
        // cursor.svg
        Cursor: number;
        // dash-circle-fill.svg
        DashCircleFill: number;
        // dash-circle.svg
        DashCircle: number;
        // dash-square-fill.svg
        DashSquareFill: number;
        // dash-square.svg
        DashSquare: number;
        // dash.svg
        Dash: number;
        // diamond-fill.svg
        DiamondFill: number;
        // diamond-half.svg
        DiamondHalf: number;
        // diamond.svg
        Diamond: number;
        // display-fill.svg
        DisplayFill: number;
        // display.svg
        Display: number;
        // dot.svg
        Dot: number;
        // download.svg
        Download: number;
        // droplet-fill.svg
        DropletFill: number;
        // droplet-half.svg
        DropletHalf: number;
        // droplet.svg
        Droplet: number;
        // egg-fill.svg
        EggFill: number;
        // egg-fried.svg
        EggFried: number;
        // egg.svg
        Egg: number;
        // eject-fill.svg
        EjectFill: number;
        // eject.svg
        Eject: number;
        // envelope-fill.svg
        EnvelopeFill: number;
        // envelope-open-fill.svg
        EnvelopeOpenFill: number;
        // envelope-open.svg
        EnvelopeOpen: number;
        // envelope.svg
        Envelope: number;
        // exclamation-circle-fill.svg
        ExclamationCircleFill: number;
        // exclamation-circle.svg
        ExclamationCircle: number;
        // exclamation-diamond-fill.svg
        ExclamationDiamondFill: number;
        // exclamation-diamond.svg
        ExclamationDiamond: number;
        // exclamation-octagon-fill.svg
        ExclamationOctagonFill: number;
        // exclamation-octagon.svg
        ExclamationOctagon: number;
        // exclamation-square-fill.svg
        ExclamationSquareFill: number;
        // exclamation-square.svg
        ExclamationSquare: number;
        // exclamation-triangle-fill.svg
        ExclamationTriangleFill: number;
        // exclamation-triangle.svg
        ExclamationTriangle: number;
        // exclamation.svg
        Exclamation: number;
        // exclude.svg
        Exclude: number;
        // eye-fill.svg
        EyeFill: number;
        // eye-slash-fill.svg
        EyeSlashFill: number;
        // eye-slash.svg
        EyeSlash: number;
        // eye.svg
        Eye: number;
        // file-arrow-down.svg
        FileArrowDown: number;
        // file-arrow-up.svg
        FileArrowUp: number;
        // file-break.svg
        FileBreak: number;
        // file-check.svg
        FileCheck: number;
        // file-code.svg
        FileCode: number;
        // file-diff.svg
        FileDiff: number;
        // file-earmark-arrow-down.svg
        FileEarmarkArrowDown: number;
        // file-earmark-arrow-up.svg
        FileEarmarkArrowUp: number;
        // file-earmark-break.svg
        FileEarmarkBreak: number;
        // file-earmark-check.svg
        FileEarmarkCheck: number;
        // file-earmark-code.svg
        FileEarmarkCode: number;
        // file-earmark-diff.svg
        FileEarmarkDiff: number;
        // file-earmark-minus.svg
        FileEarmarkMinus: number;
        // file-earmark-plus.svg
        FileEarmarkPlus: number;
        // file-earmark-ruled.svg
        FileEarmarkRuled: number;
        // file-earmark-spreadsheet.svg
        FileEarmarkSpreadsheet: number;
        // file-earmark-text.svg
        FileEarmarkText: number;
        // file-earmark-zip.svg
        FileEarmarkZip: number;
        // file-earmark.svg
        FileEarmark: number;
        // file-minus.svg
        FileMinus: number;
        // file-plus.svg
        FilePlus: number;
        // file-post.svg
        FilePost: number;
        // file-richtext.svg
        FileRichtext: number;
        // file-ruled.svg
        FileRuled: number;
        // file-spreadsheet.svg
        FileSpreadsheet: number;
        // file-text.svg
        FileText: number;
        // file-zip.svg
        FileZip: number;
        // file.svg
        File: number;
        // files-alt.svg
        FilesAlt: number;
        // files.svg
        Files: number;
        // film.svg
        Film: number;
        // filter-left.svg
        FilterLeft: number;
        // filter-right.svg
        FilterRight: number;
        // filter.svg
        Filter: number;
        // flag-fill.svg
        FlagFill: number;
        // flag.svg
        Flag: number;
        // folder-check.svg
        FolderCheck: number;
        // folder-fill.svg
        FolderFill: number;
        // folder-minus.svg
        FolderMinus: number;
        // folder-plus.svg
        FolderPlus: number;
        // folder-symlink-fill.svg
        FolderSymlinkFill: number;
        // folder-symlink.svg
        FolderSymlink: number;
        // folder.svg
        Folder: number;
        // fonts.svg
        Fonts: number;
        // forward-fill.svg
        ForwardFill: number;
        // forward.svg
        Forward: number;
        // fullscreen-exit.svg
        FullscreenExit: number;
        // fullscreen.svg
        Fullscreen: number;
        // funnel-fill.svg
        FunnelFill: number;
        // funnel.svg
        Funnel: number;
        // gear-fill.svg
        GearFill: number;
        // gear-wide-connected.svg
        GearWideConnected: number;
        // gear-wide.svg
        GearWide: number;
        // gear.svg
        Gear: number;
        // gem.svg
        Gem: number;
        // geo-alt.svg
        GeoAlt: number;
        // geo.svg
        Geo: number;
        // gift-fill.svg
        GiftFill: number;
        // gift.svg
        Gift: number;
        // graph-down.svg
        GraphDown: number;
        // graph-up.svg
        GraphUp: number;
        // grid-1x2-fill.svg
        Grid1x2Fill: number;
        // grid-1x2.svg
        Grid1x2: number;
        // grid-3x2-gap-fill.svg
        Grid3x2GapFill: number;
        // grid-3x2-gap.svg
        Grid3x2Gap: number;
        // grid-3x2.svg
        Grid3x2: number;
        // grid-3x3-gap-fill.svg
        Grid3x3GapFill: number;
        // grid-3x3-gap.svg
        Grid3x3Gap: number;
        // grid-3x3.svg
        Grid3x3: number;
        // grid-fill.svg
        GridFill: number;
        // grid.svg
        Grid: number;
        // hammer.svg
        Hammer: number;
        // hash.svg
        Hash: number;
        // heart-fill.svg
        HeartFill: number;
        // heart-half.svg
        HeartHalf: number;
        // heart.svg
        Heart: number;
        // house-door-fill.svg
        HouseDoorFill: number;
        // house-door.svg
        HouseDoor: number;
        // house-fill.svg
        HouseFill: number;
        // house.svg
        House: number;
        // hr.svg
        Hr: number;
        // image-alt.svg
        ImageAlt: number;
        // image-fill.svg
        ImageFill: number;
        // image.svg
        Image: number;
        // images.svg
        Images: number;
        // inbox-fill.svg
        InboxFill: number;
        // inbox.svg
        Inbox: number;
        // inboxes-fill.svg
        InboxesFill: number;
        // inboxes.svg
        Inboxes: number;
        // info-circle-fill.svg
        InfoCircleFill: number;
        // info-circle.svg
        InfoCircle: number;
        // info-square-fill.svg
        InfoSquareFill: number;
        // info-square.svg
        InfoSquare: number;
        // info.svg
        Info: number;
        // intersect.svg
        Intersect: number;
        // justify-left.svg
        JustifyLeft: number;
        // justify-right.svg
        JustifyRight: number;
        // justify.svg
        Justify: number;
        // kanban-fill.svg
        KanbanFill: number;
        // kanban.svg
        Kanban: number;
        // laptop.svg
        Laptop: number;
        // layers-fill.svg
        LayersFill: number;
        // layers-half.svg
        LayersHalf: number;
        // layers.svg
        Layers: number;
        // layout-sidebar-inset-reverse.svg
        LayoutSidebarInsetReverse: number;
        // layout-sidebar-inset.svg
        LayoutSidebarInset: number;
        // layout-sidebar-reverse.svg
        LayoutSidebarReverse: number;
        // layout-sidebar.svg
        LayoutSidebar: number;
        // layout-split.svg
        LayoutSplit: number;
        // layout-text-sidebar-reverse.svg
        LayoutTextSidebarReverse: number;
        // layout-text-sidebar.svg
        LayoutTextSidebar: number;
        // layout-text-window-reverse.svg
        LayoutTextWindowReverse: number;
        // layout-text-window.svg
        LayoutTextWindow: number;
        // layout-three-columns.svg
        LayoutThreeColumns: number;
        // layout-wtf.svg
        LayoutWtf: number;
        // life-preserver.svg
        LifePreserver: number;
        // lightning-fill.svg
        LightningFill: number;
        // lightning.svg
        Lightning: number;
        // link-45deg.svg
        Link45deg: number;
        // link.svg
        Link: number;
        // list-check.svg
        ListCheck: number;
        // list-nested.svg
        ListNested: number;
        // list-ol.svg
        ListOl: number;
        // list-task.svg
        ListTask: number;
        // list-ul.svg
        ListUl: number;
        // list.svg
        List: number;
        // lock-fill.svg
        LockFill: number;
        // lock.svg
        Lock: number;
        // map.svg
        Map: number;
        // mic-fill.svg
        MicFill: number;
        // mic-mute-fill.svg
        MicMuteFill: number;
        // mic-mute.svg
        MicMute: number;
        // mic.svg
        Mic: number;
        // moon.svg
        Moon: number;
        // music-note-beamed.svg
        MusicNoteBeamed: number;
        // music-note-list.svg
        MusicNoteList: number;
        // music-note.svg
        MusicNote: number;
        // music-player-fill.svg
        MusicPlayerFill: number;
        // music-player.svg
        MusicPlayer: number;
        // newspaper.svg
        Newspaper: number;
        // octagon-fill.svg
        OctagonFill: number;
        // octagon-half.svg
        OctagonHalf: number;
        // octagon.svg
        Octagon: number;
        // option.svg
        Option: number;
        // outlet.svg
        Outlet: number;
        // paperclip.svg
        Paperclip: number;
        // pause-fill.svg
        PauseFill: number;
        // pause.svg
        Pause: number;
        // pen.svg
        Pen: number;
        // pencil-square.svg
        PencilSquare: number;
        // pencil.svg
        Pencil: number;
        // pentagon-fill.svg
        PentagonFill: number;
        // pentagon-half.svg
        PentagonHalf: number;
        // pentagon.svg
        Pentagon: number;
        // people-circle.svg
        PeopleCircle: number;
        // people-fill.svg
        PeopleFill: number;
        // people.svg
        People: number;
        // person-bounding-box.svg
        PersonBoundingBox: number;
        // person-check-fill.svg
        PersonCheckFill: number;
        // person-check.svg
        PersonCheck: number;
        // person-dash-fill.svg
        PersonDashFill: number;
        // person-dash.svg
        PersonDash: number;
        // person-fill.svg
        PersonFill: number;
        // person-lines-fill.svg
        PersonLinesFill: number;
        // person-plus-fill.svg
        PersonPlusFill: number;
        // person-plus.svg
        PersonPlus: number;
        // person-square.svg
        PersonSquare: number;
        // person.svg
        Person: number;
        // phone-landscape.svg
        PhoneLandscape: number;
        // phone.svg
        Phone: number;
        // pie-chart-fill.svg
        PieChartFill: number;
        // pie-chart.svg
        PieChart: number;
        // pip-fill.svg
        PipFill: number;
        // pip.svg
        Pip: number;
        // play-fill.svg
        PlayFill: number;
        // play.svg
        Play: number;
        // plug.svg
        Plug: number;
        // plus-circle-fill.svg
        PlusCircleFill: number;
        // plus-circle.svg
        PlusCircle: number;
        // plus-square-fill.svg
        PlusSquareFill: number;
        // plus-square.svg
        PlusSquare: number;
        // plus.svg
        Plus: number;
        // power.svg
        Power: number;
        // puzzle-fill.svg
        PuzzleFill: number;
        // puzzle.svg
        Puzzle: number;
        // question-circle-fill.svg
        QuestionCircleFill: number;
        // question-circle.svg
        QuestionCircle: number;
        // question-diamond-fill.svg
        QuestionDiamondFill: number;
        // question-diamond.svg
        QuestionDiamond: number;
        // question-octagon-fill.svg
        QuestionOctagonFill: number;
        // question-octagon.svg
        QuestionOctagon: number;
        // question-square-fill.svg
        QuestionSquareFill: number;
        // question-square.svg
        QuestionSquare: number;
        // question.svg
        Question: number;
        // reply-all-fill.svg
        ReplyAllFill: number;
        // reply-all.svg
        ReplyAll: number;
        // reply-fill.svg
        ReplyFill: number;
        // reply.svg
        Reply: number;
        // screwdriver.svg
        Screwdriver: number;
        // search.svg
        Search: number;
        // server.svg
        Server: number;
        // shield-fill.svg
        ShieldFill: number;
        // shield-lock-fill.svg
        ShieldLockFill: number;
        // shield-lock.svg
        ShieldLock: number;
        // shield-shaded.svg
        ShieldShaded: number;
        // shield.svg
        Shield: number;
        // shift-fill.svg
        ShiftFill: number;
        // shift.svg
        Shift: number;
        // shuffle.svg
        Shuffle: number;
        // skip-backward-fill.svg
        SkipBackwardFill: number;
        // skip-backward.svg
        SkipBackward: number;
        // skip-end-fill.svg
        SkipEndFill: number;
        // skip-end.svg
        SkipEnd: number;
        // skip-forward-fill.svg
        SkipForwardFill: number;
        // skip-forward.svg
        SkipForward: number;
        // skip-start-fill.svg
        SkipStartFill: number;
        // skip-start.svg
        SkipStart: number;
        // slash-circle-fill.svg
        SlashCircleFill: number;
        // slash-circle.svg
        SlashCircle: number;
        // slash-square-fill.svg
        SlashSquareFill: number;
        // slash-square.svg
        SlashSquare: number;
        // slash.svg
        Slash: number;
        // sliders.svg
        Sliders: number;
        // soundwave.svg
        Soundwave: number;
        // speaker.svg
        Speaker: number;
        // square-fill.svg
        SquareFill: number;
        // square-half.svg
        SquareHalf: number;
        // square.svg
        Square: number;
        // star-fill.svg
        StarFill: number;
        // star-half.svg
        StarHalf: number;
        // star.svg
        Star: number;
        // stop-fill.svg
        StopFill: number;
        // stop.svg
        Stop: number;
        // stopwatch-fill.svg
        StopwatchFill: number;
        // stopwatch.svg
        Stopwatch: number;
        // subtract.svg
        Subtract: number;
        // sun.svg
        Sun: number;
        // table.svg
        Table: number;
        // tablet-landscape.svg
        TabletLandscape: number;
        // tablet.svg
        Tablet: number;
        // tag-fill.svg
        TagFill: number;
        // tag.svg
        Tag: number;
        // terminal-fill.svg
        TerminalFill: number;
        // terminal.svg
        Terminal: number;
        // text-center.svg
        TextCenter: number;
        // text-indent-left.svg
        TextIndentLeft: number;
        // text-indent-right.svg
        TextIndentRight: number;
        // text-left.svg
        TextLeft: number;
        // text-right.svg
        TextRight: number;
        // textarea-t.svg
        TextareaT: number;
        // textarea.svg
        Textarea: number;
        // three-dots-vertical.svg
        ThreeDotsVertical: number;
        // three-dots.svg
        ThreeDots: number;
        // toggle-off.svg
        ToggleOff: number;
        // toggle-on.svg
        ToggleOn: number;
        // toggles.svg
        Toggles: number;
        // tools.svg
        Tools: number;
        // trash-fill.svg
        TrashFill: number;
        // trash.svg
        Trash: number;
        // trash2-fill.svg
        Trash2Fill: number;
        // trash2.svg
        Trash2: number;
        // triangle-fill.svg
        TriangleFill: number;
        // triangle-half.svg
        TriangleHalf: number;
        // triangle.svg
        Triangle: number;
        // trophy.svg
        Trophy: number;
        // tv-fill.svg
        TvFill: number;
        // tv.svg
        Tv: number;
        // type-bold.svg
        TypeBold: number;
        // type-h1.svg
        TypeH1: number;
        // type-h2.svg
        TypeH2: number;
        // type-h3.svg
        TypeH3: number;
        // type-italic.svg
        TypeItalic: number;
        // type-strikethrough.svg
        TypeStrikethrough: number;
        // type-underline.svg
        TypeUnderline: number;
        // type.svg
        Type: number;
        // union.svg
        Union: number;
        // unlock-fill.svg
        UnlockFill: number;
        // unlock.svg
        Unlock: number;
        // upload.svg
        Upload: number;
        // view-list.svg
        ViewList: number;
        // view-stacked.svg
        ViewStacked: number;
        // volume-down-fill.svg
        VolumeDownFill: number;
        // volume-down.svg
        VolumeDown: number;
        // volume-mute-fill.svg
        VolumeMuteFill: number;
        // volume-mute.svg
        VolumeMute: number;
        // volume-up-fill.svg
        VolumeUpFill: number;
        // volume-up.svg
        VolumeUp: number;
        // vr.svg
        Vr: number;
        // wallet.svg
        Wallet: number;
        // watch.svg
        Watch: number;
        // wifi.svg
        Wifi: number;
        // window.svg
        Window: number;
        // wrench.svg
        Wrench: number;
        // x-circle-fill.svg
        XCircleFill: number;
        // x-circle.svg
        XCircle: number;
        // x-diamond-fill.svg
        XDiamondFill: number;
        // x-diamond.svg
        XDiamond: number;
        // x-octagon-fill.svg
        XOctagonFill: number;
        // x-octagon.svg
        XOctagon: number;
        // x-square-fill.svg
        XSquareFill: number;
        // x-square.svg
        XSquare: number;
        // x.svg
        X: number;
    }
}

declare module 'gd-bs/components/accordion' {
    
    /**
        * ### Accordion
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the accordion
        * let el = document.querySelector("#accordion");
        * let accordion = Components.Accordion({
        *     autoCollapse: true,
        *     el: el,
        *     id: "demoAccordion",
        *     items: [
        *         {
        *             btnProps: { text: "Item 1" },
        *             content: "This is the content for item 1."
        *         },
        *         {
        *             btnProps: { text: "Item 2" },
        *             content: "This is the content for item 2."
        *         },
        *         {
        *             btnProps: { text: "Item 3" },
        *             content: "This is the content for item 3."
        *         }
        *     ]
        * });
        * ```
        */
    export const Accordion: (props: IAccordionProps) => IAccordion;
    
    import { IBase, IBaseProps } from "gd-bs/base";
    import { IButtonProps } from "gd-bs/components/button";
    import { ICollapseOptions } from "gd-bs/components/collapse";
    
    /**
        * Accordion
        */
    export interface IAccordion extends IBase<IAccordionProps> { }
    
    /**
        * Accordion Item
        */
    export interface IAccordionItem {
            btnProps?: IButtonProps;
            data?: any;
            content?: string | Element;
            onClick?: (el?: HTMLElement, item?: IAccordionItem) => void;
            onRender?: (el?: HTMLElement, item?: IAccordionItem) => void;
            showFl?: boolean;
    }
    
    /**
        * Accordion Options
        */
    export interface IAccordionOptions extends ICollapseOptions { }
    
    /**
        * Accordion Properties
        */
    export interface IAccordionProps extends IBaseProps {
            autoCollapse?: boolean;
            id?: string;
            items?: Array<IAccordionItem>;
            options?: IAccordionOptions;
    }
}

declare module 'gd-bs/components/alert' {
    
    /**
        * ### Alert
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the alert
        * let el = document.querySelector("#alert");
        * let alert = Components.Alert({
        *     el: el,
        *     content: "This is an alert."
        * });
        * ```
        */
    export const Alert: (props: IAlertProps) => IAlert;
    
    /**
        * Alert Types
        */
    export const AlertTypes: IAlertTypes;
    
    import { IBase, IBaseProps } from "gd-bs/base";
    
    /**
        * Alert
        */
    export interface IAlert extends IBase<IAlertProps> {
            /** Closes an alert by removing it from the DOM. */
            close: () => void;
    
            /** Destroys an element’s alert. */
            dispose: () => void;
    
            /** Updates the alert text. */
            setText: (alertText?: string) => void;
    
            /** Updates the alert type. */
            setType: (alertType: number) => void;
    }
    
    /**
        * Alert Properties
        */
    export interface IAlertProps extends IBaseProps {
            content?: string | Element;
            header?: string;
            isDismissible?: boolean;
            type?: number;
    }
    
    /**
        * Alert Types
        */
    export type IAlertTypes = {
            Danger: number;
            Dark: number;
            Info: number;
            Light: number;
            Primary: number;
            Secondary: number;
            Success: number;
            Warning: number;
    }
}

declare module 'gd-bs/components/badge' {
    
    /**
        * ### Badge
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the badge
        * let el = document.querySelector("#badge");
        * let badge = Components.Badge({
        *     el: el,
        *     content: "Badge"
        * });
        * ```
        */
    export const Badge: (props: IBadgeProps) => IBadge;
    
    /**
        * Badge Types
        */
    export const BadgeTypes: IBadgeTypes;
    
    import { IBase, IBaseProps } from 'gd-bs/base';
    
    /**
        * Badge
        */
    export interface IBadge extends IBase<IBadgeProps> {
            /** The element. */
            el: HTMLAnchorElement | HTMLSpanElement;
    }
    
    /**
        * Badge Properties
        */
    export interface IBadgeProps extends IBaseProps{
            content?: string | Element;
            data?: any;
            header?: string;
            href?: string;
            isPill?: boolean;
            onClick?: (badge?: IBadgeProps, ev?: Event) => void;
            type?: number;
    }
    
    /**
        * Badge Types
        */
    export type IBadgeTypes = {
            Danger: number;
            Dark: number;
            Info: number;
            Light: number;
            Primary: number;
            Secondary: number;
            Success: number;
            Warning: number;
    }
}

declare module 'gd-bs/components/breadcrumb' {
    
    /**
        * ### Breadcrumb
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the breadcrumb
        * let el = document.querySelector("#breadcrumb");
        * let breadcrumb = Components.Breadcrumb({
        *     el: el,
        *     items: [
        *         { text: "Root", href: "/" },
        *         { text: "Web 1", href: "/web" },
        *         { text: "Web 1-1", href: "/web/1" }
        *     ]
        * });
        * ```
        */
    export const Breadcrumb: (props: IBreadcrumbProps) => IBreadcrumb;
    
    /**
        * Breadcrumb
        */
    export interface IBreadcrumb {
            /** The element. */
            el: Element;
    
            /** Hides the breadcrumb. */
            hide: () => void;
    
            /** Shows the breadcrumb. */
            show: () => void;
    }
    
    /**
        * Breadcrumb Item
        */
    export interface IBreadcrumbItem {
            /** The breadcrumb link */
            href?: string;
    
            /** Internal flag set by the component */
            isActive?: boolean;
    
            /** Click event for the link */
            onClick?: (item?: IBreadcrumbItem, ev?: Event) => void;
    
            /** The link text */
            text?: string;
    }
    
    /**
        * Breadcrumb Properties
        */
    export interface IBreadcrumbProps {
            /** The breadcrumb class name */
            className?: string;
    
            /** The element to render the breadcrumb to. */
            el?: Element | HTMLElement;
    
            /** The breadcrumb items */
            items?: Array<IBreadcrumbItem>
    
            /** Click event for the link */
            onClick?: (item?: IBreadcrumbItem, ev?: Event) => void;
    }
}

declare module 'gd-bs/components/button' {
    
    /**
        * ### Button
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the button
        * let el = document.querySelector("#btn");
        * let btn = Components.Button({
        *     el: el,
        *     text: "Button",
        *     onClick: (ev) => {
        *         alert("The button was clicked.");
        *     }
        * });
        * ```
        */
    export const Button: (props: IButtonProps) => IButton;
    
    /**
        * Button Types
        */
    export const ButtonTypes: IButtonTypes;
    
    import { IBadgeProps } from "gd-bs/components/badge";
    import { ISpinnerProps } from "gd-bs/components/spinner";
    
    /**
        * Button
        */
    export interface IButton {
            /** Destroys an element’s button. */
            dispose: () => void;
    
            /** The element. */
            el: Element;
    
            /** Hides the button. */
            hide: () => void;
    
            /** Updates the button text. */
            setText: (btnText?: string) => void;
    
            /** Updates the button type. */
            setType: (btnType: number) => void;
    
            /** Shows the button. */
            show: () => void;
    
            /** Toggles push state. Gives the button the appearance that it has been activated. */
            toggle: () => void;
    }
    
    /**
        * Button Properties
        */
    export interface IButtonProps {
            badge?: IBadgeProps;
            className?: string;
            controls?: string | Array<string>;
            data?: any;
            el?: Element | HTMLElement;
            href?: string;
            id?: string;
            isBlock?: boolean;
            isDisabled?: boolean;
            isExpanded?: boolean;
            isLarge?: boolean;
            isLink?: boolean;
            isSmall?: boolean;
            onClick?: (button?: IButtonProps, ev?: Event) => void;
            spinnerProps?: ISpinnerProps;
            target?: string;
            text?: string;
            title?: string;
            toggle?: string;
            trigger?: string;
            type?: number;
    }
    
    /**
        * Button Types
        */
    export type IButtonTypes = {
            Danger: number;
            Dark: number;
            Info: number;
            Light: number;
            Link: number;
            Primary: number;
            Secondary: number;
            Success: number;
            Warning: number;
            OutlineDanger: number;
            OutlineDark: number;
            OutlineInfo: number;
            OutlineLight: number;
            OutlineLink: number;
            OutlinePrimary: number;
            OutlineSecondary: number;
            OutlineSuccess: number;
            OutlineWarning: number;
    }
}

declare module 'gd-bs/components/buttonGroup' {
    
    /**
        * ### Button Group
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the buttonGroup
        * let el = document.querySelector("#buttonGroup");
        * let buttonGroup = Components.ButtonGroup({
        *     el: el,
        *     buttonType: $REST.Components.ButtonTypes.Primary,
        *     buttons: [
        *         { text: "Left" },
        *         { text: "Middle" },
        *         { text: "Right" }
        *     ]
        * });
        * ```
        */
    export const ButtonGroup: (props: IButtonGroupProps) => IButtonGroup;
    
    import { IButtonProps } from "gd-bs/components/button";
    
    /**
        * Button Group
        */
    export interface IButtonGroup {
            /** The element. */
            el: Element;
    
            /** Hides the button group. */
            hide: () => void;
    
            /** Shows the button group. */
            show: () => void;
    }
    
    /**
        * Button Group Properties
        */
    export interface IButtonGroupProps {
            buttons?: Array<IButtonProps>;
            buttonType?: number;
            className?: string;
            el?: Element | HTMLElement;
            id?: string;
            isLarge?: boolean;
            isSmall?: boolean;
            isVertical?: boolean;
            label?: string;
    }
}

declare module 'gd-bs/components/card' {
    
    /**
        * ### Card
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the card
        * let el = document.querySelector("#card");
        * let card = Components.Card({
        *     el: el,
        *     body: [
        *         {
        *             title: "Card Title",
        *             text: "This is the card contents.",
        *             actions: [
        *                 {
        *                     text: "Card Action",
        *                     buttonType: $REST.Components.ButtonTypes.Primary
        *                 }
        *             ]
        *         }
        *     ]
        * });
        * ```
        */
    export const Card: (props: ICardProps) => ICard;
    
    import { IButtonProps } from "gd-bs/components/button";
    import { INavProps } from "gd-bs/components/nav";
    
    /**
        * Card
        */
    export interface ICard {
            /** Destroys an element’s card. */
            dispose: () => void;
    
            /** The element. */
            el: Element;
    
            /** Hides the card. */
            hide: () => void;
    
            /** Shows the card. */
            show: () => void;
    }
    
    /**
        * Card Action
        */
    export interface ICardAction {
            buttonType?: number;
            data?: any;
            onClick?: (action?: ICardAction, card?: ICardBody, ev?: Event) => void;
            href?: string;
            text?: string;
    }
    
    /**
        * Card Body
        */
    export interface ICardBody {
            actions?: Array<ICardAction>;
            className?: string;
            content?: string | Element;
            data?: any;
            onClick?: (card?: ICardProps, ev?: Event) => void;
            onRender?: (el?: HTMLElement, card?: ICardBody) => void;
            onRenderTitle?: (el?: HTMLElement, card?: ICardBody) => void;
            subTitle?: string;
            text?: string;
            title?: string | Element;
    }
    
    /**
        * Card Footer
        */
    export interface ICardFooter {
            className?: string;
            content?: string | Element;
    }
    
    /**
        * Card Header
        */
    export interface ICardHeader {
            className?: string;
            content?: string | Element;
            nav?: INavProps;
    }
    
    /**
        * Card Properties
        */
    export interface ICardProps {
            body?: Array<ICardBody>;
            className?: string;
            el?: Element | HTMLElement;
            footer?: ICardFooter;
            header?: ICardHeader;
            imgBottom?: {
                    alt?: string;
                    src?: string;
            }
            imgTop?: {
                    alt?: string;
                    src?: string;
            };
            onClick?: (card?: ICardBody, ev?: Event) => void;
    }
}

declare module 'gd-bs/components/cardGroup' {
    
    /**
        * ### Card Group
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the cardGroup
        * let el = document.querySelector("#cardGroup");
        * let cardGroup = Components.CardGroup({
        *     el: el,
        *     cards: [
        *         {
        *             body: [
        *                 {
        *                     title: "Card 1",
        *                     text: "This is the first card."
        *                 }
        *             ]
        *         },
        *         {
        *             body: [
        *                 {
        *                     title: "Card 2",
        *                     text: "This is the second card."
        *                 }
        *             ]
        *         },
        *         {
        *             body: [
        *                 {
        *                     title: "Card 3",
        *                     text: "This is the third card."
        *                 }
        *             ]
        *         }
        *     ]
        * });
        * ```
        */
    export const CardGroup: (props: ICardGroupProps) => ICardGroup;
    
    import { ICardProps } from "gd-bs/components/card";
    
    /**
        * Card Group
        */
    export interface ICardGroup {
            /** The element. */
            el: Element;
    
            /** Hides the card group. */
            hide: () => void;
    
            /** Shows the card group. */
            show: () => void;
    }
    
    /**
        * Card Group Properties
        */
    export interface ICardGroupProps {
            cards?: Array<ICardProps>;
            className?: string;
            el?: Element | HTMLElement;
            isDeck?: boolean;
    }
}

declare module 'gd-bs/components/carousel' {
    
    /**
        * ### Carousel
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the carousel
        * let el = document.querySelector("#carousel");
        * let carousel = Components.Carousel({
        *     el: el,
        *     enableControls: true,
        *     enableIndicators: true,
        *     id: "carouselDemo",
        *     items: [
        *         {
        *             captions: "<h5>First Slide</h5>",
        *             imageUrl: "https://via.placeholder.com/400x200",
        *             imageAlt: "First Slide",
        *             isActive: true
        *         },
        *         {
        *             captions: "<h5>Second Slide</h5>",
        *             imageUrl: "https://via.placeholder.com/400x200",
        *             imageAlt: "Second Slide"
        *         },
        *         {
        *             captions: "<h5>Third Slide</h5>",
        *             imageUrl: "https://via.placeholder.com/400x200",
        *             imageAlt: "Third Slide"
        *         }
        *     ]
        * });
        * ```
        */
    export const Carousel: (props: ICarouselProps) => ICarousel;
    
    /**
        * Carousel
        */
    export interface ICarousel {
            /**
                * Cycles through the carousel items from left to right.
                */
            cycle: () => void;
    
            /** Destroys an element’s tab. */
            dispose: () => void;
    
            /** The element. */
            el: Element;
    
            /** Hides the carousel. */
            hide: () => void;
    
            /**
                * Cycles to the next item.
                */
            next: () => void;
    
            /**
                * Cycles the carousel to a particular frame.
                * @prop value - The frame number.
                */
            number: (value: number) => void;
    
            /**
                * Stops the carousel from cycling through items.
                */
            pause: () => void;
    
            /**
                * Cycles to the previous item.
                */
            previous: () => void;
    
            /** Shows the carousel. */
            show: () => void;
    }
    
    /**
        * Carousel Item
        */
    export interface ICarouselItem {
            captions?: string;
            className?: string;
            content?: string | Element;
            imageAlt?: string;
            imageUrl?: string;
            isActive?: boolean;
    }
    
    /**
        * Carousel Options
        */
    export interface ICarouselOptions {
            interval?: number | boolean;
            keyboard?: boolean;
            pause?: string | boolean;
            ride?: string;
            wrap?: boolean;
    }
    
    /**
        * Carousel Properties
        */
    export interface ICarouselProps {
            className?: string;
            el?: Element | HTMLElement;
            enableControls?: boolean;
            enableCrossfade?: boolean;
            enableIndicators?: boolean;
            id?: string;
            items?: Array<ICarouselItem>;
            options?: ICarouselOptions;
    }
}

declare module 'gd-bs/components/checkboxGroup' {
    
    /**
        * ### Checkbox Group
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the buttonGroup
        * let el = document.querySelector("#cbGroup");
        * let cbGroup = Components.CheckboxGroup({
        *     el: el,
        *     items: [
        *         { label: "Option 1" },
        *         { label: "Option 2" },
        *         { label: "Option 3" }
        *     ]
        * });
        * ```
        */
    export const CheckboxGroup: (props: ICheckboxGroupProps) => ICheckboxGroup;
    
    /**
        * Checkbox Group Types
        */
    export const CheckboxGroupTypes: ICheckboxTypes;
    
    /**
        * Checkbox Group
        */
    export interface ICheckboxGroup {
            /** The checkbox element. */
            el: HTMLElement;
    
            /** Gets the values. */
            getValue: () => ICheckboxGroupItem | Array<ICheckboxGroupItem>;
    
            /** Hides the checkbox group. */
            hide: () => void;
    
            /** Sets the dropdown value. */
            setValue: (value: string | Array<string>) => void;
    
            /** Shows the checkbox group. */
            show: () => void;
    }
    
    /**
        * Checkbox Group Item
        */
    export interface ICheckboxGroupItem {
            data?: any;
            isDisabled?: boolean;
            isSelected?: boolean;
            label?: string;
            name?: string;
            onChange?: (item: ICheckboxGroupItem) => void;
            type?: number;
    }
    
    /**
        * Checkbox Group Properties
        */
    export interface ICheckboxGroupProps {
            className?: string;
            colSize?: number;
            el?: Element | HTMLElement;
            hideLabel?: boolean;
            isInline?: boolean;
            isReadonly?: boolean;
            label?: string;
            items?: Array<ICheckboxGroupItem>;
            multi?: boolean;
            onChange?: (items: ICheckboxGroupItem | Array<ICheckboxGroupItem>) => void;
            title?: string;
            type?: number;
            value?: any;
    }
    
    /**
        * Checkbox Group Types
        */
    export type ICheckboxTypes = {
            Checkbox: number;
            Radio: number;
            Switch: number;
    }
}

declare module 'gd-bs/components/collapse' {
    
    /**
        * ### Collapse
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the button to toggle the collapse
        * let btn = Components.Button({
        *     el: document.querySelector("#btnCollapse"),
        *     target: "#demoCollapse",
        *     toggle: "collapse",
        *     text: "Collapse Demo"
        * });
        * 
        * // Create the collapse
        * let el = document.querySelector("#collapse");
        * let collapse = Components.Collapse({
        *     el: el,
        *      id: "demoCollapse",
        *     content: "This is the content to be collapsed."
        * });
        * ```
        */
    export const Collapse: (props: ICollapseProps) => ICollapse;
    
    import { IButtonProps } from "gd-bs/components/button";
    
    /**
        * Collapse
        */
    export interface ICollapse {
            /** Destroys an element’s collapse. */
            dispose: () => void;
    
            /** The element. */
            el: Element;
    
            /** Hides a collapsible element. */
            hide: () => void;
    
            /** Shows a collapsible element. */
            show: () => void;
    
            /** Toggles the collapsible element on invocation. */
            toggle: () => void;
    }
    
    /**
        * Collapse Options
        */
    export interface ICollapseOptions {
            parent?: string | Element;
            toggle?: boolean;
    }
    
    /**
        * Collapse Properties
        */
    export interface ICollapseProps {
            className?: string;
            content?: string | Element;
            data?: any;
            el?: Element | HTMLElement;
            id?: string;
            isMulti?: boolean;
            onRender?: (props?: ICollapseProps, el?: HTMLElement) => void;
            options?: ICollapseOptions;
    }
}

declare module 'gd-bs/components/dropdown' {
    
    /**
        * ### Dropdown
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the dropdown
        * let el = document.querySelector("#dropdown");
        * let dropdown = Components.Dropdown({
        *     el: el,
        *     label: "Select a Choice",
        *     items: [
        *         { text: "Choice 1", value: "1" },
        *         { text: "Choice 2", value: "2" },
        *         { text: "Choice 3", value: "3" },
        *         { text: "Choice 4", value: "4" },
        *         { text: "Choice 5", value: "5" }
        *     ],
        *     onChange: (item, ev) => {
        *         console.log("The selected value is: " + item.text);
        *     }
        * });
        * ```
        */
    export const Dropdown: (props: IDropdownProps) => IDropdown;
    
    /**
        * Dropdown Types
        */
    export const DropdownTypes: IDropdownTypes;
    
    /**
        * Dropdown
        */
    export interface IDropdown {
            /** Destroys an element’s dropdown. */
            dispose: () => void;
    
            /** The element. */
            el: Element;
    
            /** Gets the selected dropdown item(s). */
            getValue: () => IDropdownItem | Array<IDropdownItem>;
    
            /** Hides the dropdown. */
            hide: () => void;
    
            /** True if the dropdown is a multi-select. */
            isMulti: boolean;
    
            /** Updates the dropdown items. */
            setItems: (items: Array<IDropdownItem>) => void;
    
            /** Sets the dropdown value. */
            setValue: (value?: any | Array<any>) => void;
    
            /** Shows the dropdown. */
            show: () => void;
    
            /** Toggles the dropdown menu of a given navbar or tabbed navigation. */
            toggle: () => void;
    
            /** Updates the position of an element’s dropdown. */
            update: () => void;
    }
    
    /**
        * Dropdown Item
        */
    export interface IDropdownItem {
            className?: string;
            data?: any;
            href?: string;
            isDisabled?: boolean;
            isDivider?: boolean;
            isHeader?: boolean;
            isSelected?: boolean;
            onClick?: (item?: IDropdownItem, ev?: Event) => void;
            onRender?: (el: HTMLElement, item?: IDropdownItem) => void;
            text?: string;
            value?: string;
    }
    
    /**
        * Dropdown Properties
        */
    export interface IDropdownProps {
            className?: string;
            dropLeft?: boolean;
            dropRight?: boolean;
            dropUp?: boolean;
            el?: Element | HTMLElement;
            formFl?: boolean;
            id?: string;
            isReadonly?: boolean;
            isSplit?: boolean;
            items?: Array<IDropdownItem>;
            label?: string;
            menuOnly?: boolean;
            multi?: boolean;
            navFl?: boolean;
            onChange?: (item?: IDropdownItem | Array<IDropdownItem>, ev?: Event) => void;
            setLabelToValue?: boolean;
            title?: string;
            type?: number;
            value?: any;
    }
    
    /**
        * Dropdown Types
        */
    export type IDropdownTypes = {
            Danger: number;
            Info: number;
            Primary: number;
            Secondary: number;
            Success: number;
            Warning: number;
    }
}

declare module 'gd-bs/components/form' {
    
    /**
        * ### Form
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the form
        * let el = document.querySelector("#myForm");
        * let form = Components.Form({
        *     el: el,
        *     rows: [
        *         {
        *             control: {
        *                 label: "First Name:",
        *                 name: "FName",
        *                 type: Components.FormControlTypes.TextField
        *             }
        *         },
        *         {
        *             control: {
        *                 label: "Last Name:",
        *                 name: "LName",
        *                 type: Components.FormControlTypes.TextField
        *             }
        *         },
        *         {
        *             control: {
        *                 label: "Choices:",
        *                 name: "Choice",
        *                 type: Components.FormControlTypes.Dropdown,
        *                 items: [
        *                     { text: "Choice 1", value: "1" },
        *                     { text: "Choice 2", value: "2" },
        *                     { text: "Choice 3", value: "3" },
        *                     { text: "Choice 4", value: "4" },
        *                     { text: "Choice 5", value: "5" }
        *                 ]
        *             }
        *         }
        *     ],
        *     value: {
        *         FName: "Gunjan",
        *         LName: "Datta",
        *         Choice: "3"
        *     }
        * });
        * ```
        */
    export const Form: (props: IFormProps) => IForm;
    
    import { IFormControl, IFormControlProps, IFormControlTypes } from "gd-bs/components/formControl";
    
    /**
        * Form
        */
    export interface IForm {
            /** Appends controls to the form */
            appendControls(controls: Array<IFormControlProps>);
    
            /** Appends rows to the form */
            appendRows(rows: Array<IFormRow>);
    
            /** The form controls */
            controls: Array<IFormControl>;
    
            /** The form element */
            el: Element | HTMLElement;
    
            /** Gets a control by its name */
            getControl: (name: string) => IFormControl;
    
            /** Returns the form values */
            getValues: () => { [key: string]: any };
    
            /** Hides the form. */
            hide: () => void;
    
            /** Validates the form */
            isValid: () => boolean;
    
            /** Shows the form. */
            show: () => void;
    }
    
    /**
        * Form Column
        */
    export interface IFormColumn {
            control: IFormControlProps;
            isAutoSized?: boolean;
            size?: number;
    }
    
    /**
        * Form Properties
        */
    export interface IFormProps {
            className?: string;
            controls?: Array<IFormControlProps>;
            el?: Element | HTMLElement,
            rowClassName?: string;
            rows?: Array<IFormRow>;
            onControlRendering?: (control: IFormControlProps) => void | Promise<IFormControlProps>;
            onControlRendered?: (control: IFormControl) => void | Promise<IFormControl>;
            onRendered?: (controls: Array<IFormControl>) => void;
            value?: any;
    }
    
    /**
        * Form Row
        */
    export interface IFormRow {
            className?: string;
            isAutoSized?: boolean;
            isCentered?: boolean;
            columns?: Array<IFormColumn>;
    }
}

declare module 'gd-bs/components/formControl' {
    
    /**
        * ### Form Control
        */
    export const FormControl: (props: IFormControlProps) => IFormControl;
    
    import { ICheckboxGroup, ICheckboxGroupItem } from "gd-bs/components/checkboxGroup";
    import { IDropdown, IDropdownItem } from "gd-bs/components/dropdown";
    import { IInputGroup } from "gd-bs/components/inputGroup";
    import { IListBox } from "gd-bs/components/listBox";
    
    /**
        * Custom Controls
        */
    export const CustomControls: {
            // Gets the event by type
            getByType(key: number): (props?: IFormControlProps) => void;
    
            /** Registers a custom form control type. */
            registerType: (key: number, onRender: (props?: IFormControlProps) => void) => void;
    }
    
    /**
        * Form Control Types
        */
    export const FormControlTypes: IFormControlTypes;
    
    /**
        * Form Control
        */
    export interface IFormControl {
            el: HTMLElement;
    
            checkbox: ICheckboxGroup;
    
            control: ICheckboxGroup | IDropdown | IInputGroup | IListBox;
    
            dropdown: IDropdown;
    
            getValue: () => any;
    
            isValid: boolean;
    
            props: IFormControlProps;
    
            textbox: IInputGroup;
    
            setLabel: (value: string) => void;
    
            setValue: (value) => void;
    }
    
    /**
        * Form Control Properties
        */
    export interface IFormControlProps {
            className?: string;
            controlClassName?: string;
            data?: any;
            description?: string;
            el?: HTMLElement;
            errorMessage?: string;
            isReadonly?: boolean;
            isPlainText?: boolean;
            label?: string;
            loadingMessage?: string;
            name?: string;
            onControlRendering?: (control: IFormControlProps) => void | Promise<IFormControlProps>;
            onControlRendered?: (control: IFormControl) => void | Promise<IFormControl>;
            onGetValue?: (control: IFormControlProps) => any;
            onValidate?: (control: IFormControlProps, value: any) => boolean | IFormControlValidationResult;
            required?: boolean;
            title?: string;
            type?: number;
            value?: any;
    }
    
    /**
        * Form Control Properties - Checkbox
        */
    export interface IFormControlPropsCheckbox extends IFormControlProps {
            el?: HTMLInputElement;
            hideLabel?: boolean;
            isInline?: boolean;
            items?: Array<ICheckboxGroupItem>;
            multi?: boolean;
            onChange?: (item: Array<ICheckboxGroupItem>) => void;
    }
    
    /**
        * Form Control Properties - Dropdown
        */
    export interface IFormControlPropsDropdown extends IFormControlProps {
            items?: Array<IDropdownItem>;
            onChange?: (item: IDropdownItem | Array<IDropdownItem>) => void;
    }
    
    /**
        * Form Control Properties - List Box
        */
    export interface IFormControlPropsListBox extends IFormControlProps {
            items?: Array<IDropdownItem>;
            multi?: boolean;
            onChange?: (items: Array<IDropdownItem>) => void;
            placeholder?: string;
    }
    
    /**
        * Form Control Properties - Number Field
        */
    export interface IFormControlPropsNumberField extends IFormControlPropsTextField {
            max?: number;
            min?: number;
            step?: number;
    }
    
    /**
        * Form Control Properties - Range
        */
    export interface IFormControlPropsRange extends IFormControlPropsNumberField { }
    
    /**
        * Form Control Properties - Switch
        */
    export interface IFormControlPropsSwitch extends IFormControlPropsCheckbox { }
    
    /**
        * Form Control Properties - TextField
        */
    export interface IFormControlPropsTextField extends IFormControlProps {
            el?: HTMLInputElement;
            onChange?: (value: string) => void;
            placeholder?: string;
            rows?: number;
    }
    
    /**
        * Form Control Types
        */
    export type IFormControlTypes = {
            Checkbox: number;
            Email: number;
            Dropdown: number;
            File: number;
            ListBox: number;
            MultiDropdown: number;
            Password: number;
            Radio: number;
            Range: number;
            Readonly: number;
            Switch: number;
            TextArea: number;
            TextField: number;
    }
    
    /**
        * Form Control Validation Result
        */
    export interface IFormControlValidationResult {
            invalidMessage?: string;
            isValid?: boolean;
            validMessage?: string;
    }
}

declare module 'gd-bs/components/inputGroup' {
    
    /**
        * ### Input Group
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the inputGroup
        * let el = document.querySelector("#inputGroup");
        * let inputGroup = Components.inputGroup({
        *     el: el,
        *     label: "My Name:",
        *     value: "First Last"
        * });
        * ```
        */
    export const InputGroup: (props: IInputGroupProps) => IInputGroup;
    
    /**
        * Input Group Types
        */
    export const InputGroupTypes: IInputGroupTypes;
    
    import { IButtonProps } from "gd-bs/components/button";
    
    /**
        * Button Group
        */
    export interface IInputGroup {
            /** The element. */
            el: HTMLElement;
    
            /** Method to get the value. */
            getValue: () => string;
    
            /** Hides the input group. */
            hide: () => void;
    
            /** Method to set the value. */
            setValue: (value: string) => void;
    
            /** Shows the input group. */
            show: () => void;
    }
    
    /**
        * Input Group Properties
        */
    export interface IInputGroupProps {
            appendedButtons?: Array<IButtonProps>;
            appendedLabel?: string;
            className?: string;
            description?: string;
            el?: Element | HTMLElement;
            formFl?: boolean;
            id?: string;
            isLarge?: boolean;
            isPlainText?: boolean;
            isReadonly?: boolean;
            isSmall?: boolean;
            label?: string;
            max?: number;
            min?: number;
            onClear?: () => void;
            onChange?: (value?: string, ev?: Event) => void;
            placeholder?: string;
            prependedButtons?: Array<IButtonProps>;
            prependedLabel?: string;
            rows?: number;
            step?: number;
            title?: string;
            type?: number;
            value?: string;
    }
    
    /**
        * Input Group Types
        */
    export type IInputGroupTypes = {
            Email: number;
            File: number;
            Password: number;
            Range: number;
            Search: number;
            TextArea: number;
            TextField: number;
    }
}

declare module 'gd-bs/components/jumbotron' {
    
    /**
        * ### Jumbotron
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the jumbotron
        * let el = document.querySelector("#jumbotron");
        * let jumbotron = Components.Jumbotron({
        *     el: el,
        *     title: "My Jumbotron",
        *     lead: "This is a jumbotron"
        * });
        * ```
        */
    export const Jumbotron: (props: IJumbotronProps) => IJumbotron;
    
    /**
        * Jumbotron
        */
    export interface IJumbotron {
            /** The element. */
            el: Element;
    
            /** Hides the jumbotron. */
            hide: () => void;
    
            /** Shows the jumbotron. */
            show: () => void;
    }
    
    /**
        * Jumbotron Properties
        */
    export interface IJumbotronProps {
            className?: string;
            content?: string | Element;
            el?: Element | HTMLElement;
            isFluid?: boolean;
            lead?: string;
            onRenderContent?: (el?: HTMLElement) => void;
            title?: string;
    }
}

declare module 'gd-bs/components/listBox' {
    import { IDropdown, IDropdownItem } from "gd-bs/components/dropdown";
    
    /**
        * List Box
        */
    export interface IListBox {
            /** The element. */
            el: Element;
    
            /** The selected listbox items. */
            getValue: () => Array<IDropdownItem>;
    
            /** Sets the listbox value. */
            setValue: (value?: any | Array<any>) => void;
    }
    
    /**
        * List Box Properties
        */
    export interface IListBoxProps {
            label?: string;
            items: Array<IDropdownItem>;
            multi?: boolean;
            placeholder?: string;
            onChange?: (items: Array<IDropdownItem>) => void;
            value?: any;
    }
}

declare module 'gd-bs/components/listGroup' {
    
    /**
        * ### List Group
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the listGroup
        * let el = document.querySelector("#listGroup");
        * let listGroup = Components.listGroup({
        *     el: el,
        *     colWidth: 4,
        *     isTabs: true,
        *     items: [
        *         { tabName: "Tab 1", content: "This is the content for tab 1.", isActive: true },
        *         { tabName: "Tab 2", content: "This is the content for tab 2.", badge: { content: "10", type: 4 } },
        *         { tabName: "Tab 3", content: "This is the content for tab 3." },
        *         { tabName: "Tab 4", content: "This is the content for tab 4." },
        *         { tabName: "Tab 5", content: "This is the content for tab 5." }
        *     ]
        * });
        * ```
        */
    export const ListGroup: (props: IListGroupProps) => IListGroup;
    
    /**
        * List Group Item Types
        */
    export const ListGroupItemTypes: IListGroupItemTypes;
    
    import { IBadgeProps } from "gd-bs/components/badge";
    
    /**
        * List Group
        */
    export interface IListGroup {
            /** The element. */
            el: Element;
    
            /** Hides the list group. */
            hide: () => void;
    
            /**
                * Shows the list group, or specified tab content.
                * @prop elId - The tab id.
                */
            show: (tabId?: string) => void;
    }
    
    /**
        * List Group Item
        */
    export interface IListGroupItem {
            badge?: IBadgeProps;
            className?: string;
            content?: string | Element;
            data?: any;
            href?: string;
            isActive?: boolean;
            isDisabled?: boolean;
            onClick?: (el?: HTMLElement, item?: IListGroupItem) => void;
            onRender?: (el?: HTMLElement, item?: IListGroupItem) => void;
            tabName?: string;
            type?: number;
    }
    
    /**
        * List Group Properties
        */
    export interface IListGroupProps {
            className?: string;
            colWidth?: number;
            el?: Element | HTMLElement;
            fadeTabs?: boolean;
            isFlush?: boolean;
            isTabs?: boolean;
            items?: Array<IListGroupItem>;
    }
    
    /**
        * List Group Item Types
        */
    export type IListGroupItemTypes = {
            Danger: number;
            Dark: number;
            Info: number;
            Light: number;
            Primary: number;
            Secondary: number;
            Success: number;
            Warning: number;
    }
}

declare module 'gd-bs/components/modal' {
    
    /**
        * ### Modal
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the button
        * Components.Button({
        *     el: document.querySelector("#modalDemo"),
        *     target: "#bsModalDemo",
        *     text: "Show Modal",
        *     toggle: "modal"
        * });
        * 
        * // Create the modal
        * let el = document.querySelector("#modalDemo");
        * let modal = Components.Modal({
        *     el: el,
        *     id: "bsModalDemo",
        *     title: "Modal Demo",
        *     body: "This is the body of the modal."
        * });
        * ```
        */
    export const Modal: (props: IModalProps) => IModal;
    
    import { IButtonProps } from "gd-bs/components/button";
    
    /**
        * Modal
        */
    export interface IModal {
            /** Destroys an element’s modal. */
            dispose: () => void;
    
            /** The element. */
            el: Element,
    
            /** Manually readjust the modal’s position if the height of a modal changes while it is open (i.e. in case a scrollbar appears). */
            handleUpdate: () => void;
    
            /** Manually hides a modal. */
            hide: () => void;
    
            /** Returns true if the modal is visible. */
            isVisible: boolean;
    
            /** Updates the title. */
            setTitle: (title: string) => void;
    
            /** Manually opens a modal. */
            show: () => void;
    
            /** Manually toggles a modal. */
            toggle: () => void;
    }
    
    /**
        * Modal Options
        */
    export interface IModalOptions {
            /** Includes a modal-backdrop element. Alternatively, specify static for a backdrop which doesn't close the modal on click. */
            backdrop: boolean | string;
    
            /** Puts the focus on the modal when initialized. */
            focus: boolean;
    
            /** Closes the modal when escape key is pressed. */
            keyboard: boolean;
    
            /** Shows the modal when initialized. */
            show: boolean;
    }
    
    /**
        * Modal Properties
        */
    export interface IModalProps {
            body?: string | Element;
            className?: string;
            el?: Element | HTMLElement;
            disableFade?: boolean;
            footer?: string | Element;
            hideCloseButton?: boolean;
            id?: string;
            isCentered?: boolean;
            isLarge?: boolean;
            isSmall?: boolean;
            isStatic?: boolean;
            onClose?: (el: HTMLDivElement) => void;
            onRenderBody?: (el: HTMLDivElement) => void;
            onRenderFooter?: (el: HTMLDivElement) => void;
            title?: string;
    }
}

declare module 'gd-bs/components/nav' {
    
    /**
        * ### Navigation
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
    
        * // Create the navigation
        * let el = document.querySelector("#navigation");
        * let nav = Components.Nav({
        *     el: el,
        *     isPills: true,
        *     items: [
        *         { title: "Nav 1", isActive: true },
        *         { title: "Nav 2" },
        *         { title: "Nav 3" },
        *         { title: "Nav 4" },
        *         { title: "Nav 5" }
        *     ]
        * });
        * ```
        */
    export const Nav: (props: INavProps) => INav;
    
    /**
        * Navigation
        */
    export interface INav {
            /** Destroys an element’s tab. */
            dispose: () => void;
    
            /** The element. */
            el: Element;
    
            /** Hides the navigation. */
            hide: () => void;
    
            /**
                * Shows the navigation or selects the given tab and shows its associated pane. Any other tab that was previously selected becomes unselected and its associated pane is hidden.
                * @prop selector - The query selector.
                */
            show: (selector?: string) => void;
    }
    
    /**
        * Navigation Properties
        */
    export interface INavProps {
            className?: string;
            data?: any;
            el?: Element | HTMLElement;
            enableFill?: boolean;
            fadeTabs?: boolean;
            id?: string;
            items?: Array<INavLink>;
            isJustified?: boolean;
            isPills?: boolean;
            isTabs?: boolean;
            isVertical?: boolean;
    }
    
    /**
        * Navigation Links
        */
    export interface INavLink {
            isActive?: boolean;
            isDisabled?: boolean;
            data?: any;
            href?: string;
            onClick?: (item?: INavLink, ev?: Event) => void;
            onRenderTab?: (item?: INavLink, el?: HTMLDivElement) => void;
            tabContent?: string | Element;
            title?: string;
    }
}

declare module 'gd-bs/components/navbar' {
    
    /**
        * ### Navbar
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the navbar
        * let el = document.querySelector("#navbar");
        * let navbar = Components.Navbar({
        *     el: el,
        *     brand: "Navbar",
        *     searchBox: {
        *         onChange: (value) => {
        *             // Log the value
        *             console.log("The search value is: " + value);
        *         },
        *         onSearch: (value) => {
        *             // Log the value
        *             console.log("The search value is: " + value);
        *         }
        *     },
        *     items: [
        *         {
        *             text: "Home",
        *             isActive: true
        *         },
        *         {
        *             text: "Link"
        *         },
        *         {
        *             text: "Disabled Link",
        *             isDisabled: true
        *         },
        *         {
        *             text: "Dropdown Link",
        *             items: [
        *                 { text: "Link 1" },
        *                 { text: "Link 2" },
        *                 { text: "Link 3" },
        *                 { text: "Link 4" },
        *                 { text: "Link 5" }
        *             ]
        *         }
        *     ]
        * });
        * ```
        */
    export const Navbar: (props: INavbarProps) => INavbar;
    
    /**
        * Navbar Types
        */
    export const NavbarTypes: INavbarTypes;
    
    import { IButtonProps } from "gd-bs/components/button";
    import { IDropdownItem } from "gd-bs/components/dropdown";
    
    /**
        * Navbar
        */
    export interface INavbar {
            /** The element. */
            el: Element;
    
            /** Hides the nav bar. */
            hide: () => void;
    
            /** Shows the nav bar. */
            show: () => void;
    }
    
    /**
        * Navbar Item
        */
    export interface INavbarItem {
            href?: string;
            isActive?: boolean;
            isDisabled?: boolean;
            items?: Array<IDropdownItem>;
            onClick?: (item?: INavbarItem, ev?: Event) => void;
            text?: string;
    }
    
    /**
        * Navbar Properties
        */
    export interface INavbarProps {
            brand?: string;
            brandUrl?: string;
            className?: string;
            el?: Element | HTMLElement;
            enableSearch?: boolean;
            id?: string;
            items?: Array<INavbarItem>;
            onClick?: (item?: INavbarItem, ev?: Event) => void;
            searchBox?: INavbarSearchBox;
            type?: number;
    }
    
    /**
        * Navbar Types
        */
    export type INavbarTypes = {
            Dark: number;
            Light: number;
            Primary: number;
    }
    
    /**
        * Navbar Search Box
        */
    export interface INavbarSearchBox {
            btnType?: number;
            btnText?: string;
            hideButton?: boolean;
            onChange?: (value?: string) => void;
            onSearch?: (value?: string) => void;
            placeholder?: string;
    }
}

declare module 'gd-bs/components/pagination' {
    
    /**
        * ### Pagination
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the pagination
        * let el = document.querySelector("#pagination");
        * let pagination = Components.Pagination({
        *     el: el,
        *     numberOfPages: 5,
        *     onClick: (index, ev) => {
        *         // Log the index
        *         console.log("The page number selected is: " + index);
        *     }
        * });
        * ```
        */
    export const Pagination: (props: IPaginationProps) => IPagination;
    
    /**
        * Pagination Alignment
        */
    export const PaginationAlignment: IPaginationAlignment;
    
    /**
        * Pagination
        */
    export interface IPagination {
            /** The element. */
            el: Element;
    
            /** Hides the pagination. */
            hide: () => void;
    
            /** Shows the pagination. */
            show: () => void;
    }
    
    /**
        * Pagination Properties
        */
    export interface IPaginationProps {
            alignment?: number;
            className?: string;
            el?: Element;
            isLarge?: boolean;
            isSmall?: boolean;
            label?: string;
            numberOfPages?: number;
            onClick?: (pageNumber?: number, ev?: Event) => void;
    }
    
    /**
        * Pagination Alignment
        */
    export type IPaginationAlignment = {
            Centered: number;
            Left: number;
            Right: number;
    }
}

declare module 'gd-bs/components/panel' {
    
    /**
        * ### Panel
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the button
        * Components.Button({
        *     el: document.querySelector("#panel"),
        *     target: "#my-panel",
        *     text: "Show Panel",
        *     toggle: "modal"
        * });
        * 
        * // Create the panel
        * let el = document.querySelector("#panel");
        * let panel = Components.Panel({
        *     el: el,
        *     type: Components.PanelTypes.Large,
        *     modalProps: {
        *         button: { text: "Show Panel" },
        *         id: "my-panel",
        *         title: "Panel Demo",
        *         onRenderBody: (el) => {
        *             // Render the body
        *         }
        *     }
        * });
        * ```
        */
    export const Panel: (props: IPanelProps) => IPanel;
    
    /**
        * Panel Types
        */
    export const PanelTypes: IPanelTypes;
    
    import { IModal, IModalProps } from "gd-bs/components/modal";
    
    /**
        * Panel
        */
    export interface IPanel {
            /** The element. */
            el: Element;
    
            /** The modal. */
            modal: IModal;
    
            /** Hides the panel. */
            hide: () => void;
    
            /** Shows the panel. */
            show: () => void;
    }
    
    /**
        * Panel Properties
        */
    export interface IPanelProps {
            className?: string;
            el?: Element | HTMLElement;
            modalProps?: IModalProps;
            type?: number;
    }
    
    /**
        * Panel Types
        */
    export type IPanelTypes = {
            Small: number;
            Medium: number;
            Large: number;
            XLarge: number;
            Full: number;
    }
}

declare module 'gd-bs/components/popover' {
    
    /**
        * ### Popover
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the popover
        * let el = document.querySelector("#popover");
        * let popover = Components.Popover({
        *     el: el,
        *     isDismissible: true,
        *     btnProps: {
        *         text: "Popover Demo"
        *     },
        *     options: {
        *         container: "body",
        *         content: "This is the popover content.",
        *         title: "My Popover",
        *         trigger: "hover"
        *     }
        * });
        * ```
        */
    export const Popover: (props: IPopoverProps) => IPopover;
    
    /**
        * Popover Types
        */
    export const PopoverTypes: IPopoverTypes;
    
    import { IButtonProps } from "gd-bs/components/button";
    
    /**
        * Popover
        */
    export interface IPopover {
            /** Destroys an element’s popover. */
            dispose: () => void;
    
            /** The element. */
            el: Element;
    
            /** Hides an element’s popover. */
            hide: () => void;
    
            /** Toggles an element's popover. */
            toggle: () => void;
    
            /** Toggles the ability for an element’s popover to be shown or hidden. */
            toggleEnabled: () => void;
    
            /** Reveals an element’s popover. */
            show: () => void;
    
            /** Updates the position of an element’s popover. */
            update: () => void;
    }
    
    /**
        * Popover Options
        */
    export interface IPopoverOptions {
            animation?: boolean;
            boundary?: string | Element;
            container?: string | Element | Function;
            content?: string | Element | Function;
            delay?: number | object;
            fallbackPlacement?: string | Array<string>;
            html?: boolean;
            offset?: number | string;
            placement?: string | Function;
            selector?: string;
            template?: string;
            title?: string | Element | Function;
            trigger?: string;
    }
    
    /**
        * Popover Properties
        */
    export interface IPopoverProps {
            btnProps?: IButtonProps;
            className?: string;
            el?: Element | HTMLElement;
            isDismissible?: boolean;
            options?: IPopoverOptions;
            target?: Element,
            type?: number;
    }
    
    /**
        * Popover Types
        */
    export type IPopoverTypes = {
            Auto: number;
            Bottom: number;
            Left: number;
            Right: number;
            Top: number;
    }
}

declare module 'gd-bs/components/progress' {
    
    /**
        * ### Progress
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the progress
        * let el = document.querySelector("#progress");
        * let progress = Components.Progress({
        *     el: el,
        *     size: 25,
        *     label: "25%"
        * });
        * ```
        */
    export const Progress: (props: IProgressProps) => IProgress;
    
    /**
        * Progress
        */
    export interface IProgress {
            /** The element. */
            el: Element;
    
            /** Hides the progress. */
            hide: () => void;
    
            /** The progress bar element */
            progressBar: HTMLDivElement;
    
            /** Shows the progress. */
            show: () => void;
    }
    
    /**
        * Progress Properties
        */
    export interface IProgressProps {
            className?: string;
            el?: Element | HTMLElement;
            isAnimated?: boolean;
            isStriped?: boolean;
            label?: string;
            max?: number;
            min?: number;
            size?: number;
    }
}

declare module 'gd-bs/components/progressGroup' {
    
    /**
        * ### Progress Group
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the progress group
        * let el = document.querySelector("#progressGroup");
        * let progressGroup = Components.ProgressGroup({
        *     el: el,
        *     progressbars: [
        *         {
        *             size: 25,
        *             isStriped: true,
        *             label: "25%"
        *         },
        *         {
        *             size: 50,
        *             isAnimated: true,
        *             isStriped: true,
        *             label: "50%"
        *         }
        *     ]
        * });
        * ```
        */
    export const ProgressGroup: (props: IProgressGroupProps) => IProgressGroup;
    
    import { IProgressProps } from "gd-bs/components/progress";
    
    /**
        * Progress Group
        */
    export interface IProgressGroup {
            /** The element. */
            el: Element;
    
            /** Hides the progress group. */
            hide: () => void;
    
            /** Shows the progress group. */
            show: () => void;
    }
    
    /**
        * Progress Group Properties
        */
    export interface IProgressGroupProps {
            className?: string;
            el?: Element | HTMLElement;
            isMultiple?: boolean;
            progressbars?: Array<IProgressProps>;
    }
}

declare module 'gd-bs/components/spinner' {
    
    /**
        * ### Spinner
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create a spinner
        * let el = document.querySelector("#spinner");
        * Components.Spinner({
        *     el,
        *     text: "Loading...",
        *     type: Components.SpinnerTypes.Danger
        * });
        * ```
        */
    export const Spinner: (props: ISpinnerProps) => ISpinner;
    
    /**
        * Spinner Types
        */
    export const SpinnerTypes: ISpinnerTypes;
    
    /**
        * Spinner
        */
    export interface ISpinner {
            /** The element. */
            el: Element;
    
            /** Hides the spinner. */
            hide: () => void;
    
            /** Shows the spinner. */
            show: () => void;
    }
    
    /**
        * Spinner Properties
        */
    export interface ISpinnerProps {
            className?: string;
            el?: Element | HTMLElement;
            isGrowing?: boolean;
            isSmall?: boolean;
            text?: string;
            type?: number;
    }
    
    /**
        * Spinner Types
        */
    export type ISpinnerTypes = {
            Danger: number;
            Dark: number;
            Info: number;
            Light: number;
            Primary: number;
            Secondary: number;
            Success: number;
            Warning: number;
    }
}

declare module 'gd-bs/components/table' {
    
    /**
        * ### Table
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create the table
        * let el = document.querySelector("#table");
        * let table = Components.Table({
        *     el: el,
        *     className: "table-sm is-striped",
        *     columns: [
        *         { name: "a0", title: "Actions", isHidden: true },
        *         { name: "a1", title: "Col 1" },
        *         { name: "a2", title: "Col 2" },
        *         { name: "a3", title: "Col 3" }
        *     ],
        *     rows: [
        *         { a0: "1", a1: "1.1", a2: "1.2", a3: "1.3" },
        *         { a0: "2", a1: "2.1", a2: "2.2", a3: "2.3" },
        *         { a0: "3", a1: "3.1", a2: "3.2", a3: "3.3" },
        *         { a0: "4", a1: "4.1", a2: "4.2", a3: "4.3" },
        *         { a0: "5", a1: "5.1", a2: "5.2", a3: "5.3" },
        *         { a0: "6", a1: "6.1", a2: "6.2", a3: "6.3" },
        *         { a0: "7", a1: "7.1", a2: "7.2", a3: "7.3" },
        *         { a0: "8", a1: "8.1", a2: "8.2", a3: "8.3" },
        *         { a0: "9", a1: "9.1", a2: "9.2", a3: "9.3" }
        *     ]
        * });
        * ```
        */
    export const Table: (props: ITableProps) => ITable
    
    /**
        * Table
        */
    export interface ITable {
            addRows(rows: Array<any>);
    
            el: HTMLElement;
    
            /** Hides the table. */
            hide: () => void;
    
            /** Shows the table. */
            show: () => void;
    }
    
    /**
        * Table Properties
        */
    export interface ITableProps {
            className?: string;
            columns?: Array<ITableColumn>;
            el?: Element | HTMLElement;
            onClickCell?: (el: HTMLTableDataCellElement, column?: ITableColumn, data?: any) => void;
            onClickHeader?: (el: HTMLTableHeaderCellElement, column?: ITableColumn) => void;
            onRenderCell?: (el?: HTMLTableDataCellElement, column?: ITableColumn, data?: any) => void;
            onRenderHeaderCell?: (el?: HTMLTableDataCellElement, column?: ITableColumn) => void;
            onRenderHeaderRow?: (el?: HTMLTableRowElement) => void;
            onRenderRow?: (el?: HTMLTableRowElement, data?: any) => void;
            rows?: Array<any>;
    }
    
    /**
        * Table Column
        */
    export interface ITableColumn {
            className?: string;
            data?: any;
            enableSort?: boolean;
            isHidden?: boolean;
            name: string;
            onClickCell?: (el: HTMLTableDataCellElement, column?: ITableColumn, data?: any) => void;
            onClickHeader?: (el: HTMLTableHeaderCellElement, column?: ITableColumn) => void;
            onRenderCell?: (el: HTMLTableDataCellElement, column?: ITableColumn, data?: any) => void;
            onRenderHeader?: (el?: HTMLTableDataCellElement, column?: ITableColumn) => void;
            scope?: string;
            title?: string;
    }
}

declare module 'gd-bs/components/toast' {
    
    /**
        * ### Toast
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create a toast
        * let el = document.querySelector("#toast");
        * Components.Toast({
        *     el,
        *     headerText: "Header",
        *     body: "This is the body of the toast.",
        *     mutedText: "2 seconds ago",
        *     options: { autohide: false }
        * });
        * ```
        */
    export const Toast: (props: IToastProps) => IToast;
    
    /**
        * Toast
        */
    export interface IToast {
            /** The component element. */
            el: HTMLElement;
    
            /** Hides the toast. */
            hide: () => void;
    
            /** Shows the toast. */
            show: () => void;
    }
    
    /**
        * Toast Properties
        */
    export interface IToastProps {
            body?: string | Element;
            className?: string;
            data?: any;
            el?: Element | HTMLElement;
            headerImgClass?: string;
            headerImgSrc?: string;
            headerText?: string;
            hideCloseButton?: boolean;
            mutedText?: string;
            options?: IToastOptions;
            onClick?: (el?: HTMLElement, data?: any) => void;
            onRenderBody?: (el?: HTMLElement, data?: any) => void;
            onRenderHeader?: (el?: HTMLElement, data?: any) => void;
    }
    
    /**
        * Toast Options
        */
    export interface IToastOptions {
            animation?: boolean;
            autohide?: boolean;
            delay?: number;
    }
}

declare module 'gd-bs/components/toolbar' {
    
    /**
        * ### Toolbar
        * 
        * ```ts
        * import { Components } from "gd-sprest-bs";
        * 
        * // Create a toolbar
        * let el = document.querySelector("#toolbar");
        * Components.Toolbar({
        *     el,
        *     spacing: 3,
        *     items: [
        *         { buttons: [{ text: "Button 1" }] },
        *         { buttons: [{ text: "Button 2" }] },
        *         { buttons: [{ text: "Button 3" }] },
        *         { buttons: [{ text: "Button 4" }] },
        *         { buttons: [{ text: "Button 5" }] }
        *     ]
        * });
        * ```
        */
    export const Toolbar: (props: IToolbarProps) => IToolbar;
    
    /**
        * Toolbar
        */
    export interface IToolbar {
            /** The element. */
            el: Element;
    
            /** Hides the toolbar. */
            hide: () => void;
    
            /** Shows the toolbar. */
            show: () => void;
    }
    
    import { IButtonProps } from "gd-bs/components/button";
    import { IInputGroupProps } from "gd-bs/components/inputGroup";
    
    /**
        * Toolbar Item
        */
    export interface IToolbarItem {
            buttons?: Array<IButtonProps>;
            buttonType?: number;
            inputGroup?: IInputGroupProps;
    }
    
    /**
        * Toolbar Properties
        */
    export interface IToolbarProps {
            className?: string;
            el?: Element | HTMLElement;
            items?: Array<IToolbarItem>;
            spacing?: number;
    }
}

declare module 'gd-bs/components/tooltip' {
    
    /**
        * ### Tooltip
        * 
        * ```ts
    import { Components } from "gd-sprest-bs";
    
    // Create the tooltip
    let el = document.querySelector("#tooltip");
    let tooltip = Components.Tooltip({
            el: el,
            text: "Tooltip Demo"
            options: {
                    html: true,
                    title: "My Tooltip",
            }
    });
    ```
        */
    export const Tooltip: (props: ITooltipProps) => ITooltip;
    
    /**
        * Tooltip Types
        */
    export const TooltipTypes: ITooltipTypes;
    
    import { IButtonProps } from "gd-bs/components/button";
    
    /**
        * Tooltip
        */
    export interface ITooltip {
            /** Destroys an element’s tooltip. */
            dispose: () => void;
    
            /** The element. */
            el: Element;
    
            /** Gives an element’s tooltip the ability to be shown. */
            enable: () => void;
    
            /** Hides an element’s tooltip. */
            hide: () => void;
    
            /** Toggles an element's tooltip. */
            toggle: () => void;
    
            /** Toggles the ability for an element’s tooltip to be shown or hidden. */
            toggleEnabled: () => void;
    
            /** Reveals an element’s tooltip. */
            show: () => void;
    
            /** Updates the position of an element’s tooltip. */
            update: () => void;
    }
    
    /**
        * Tooltip Options
        */
    export interface ITooltipOptions {
            animation?: boolean;
            boundary?: string;
            container?: string;
            delay?: number | object;
            fallbackPlacement?: string | Array<string>;
            html?: boolean;
            offset?: number | string;
            placement?: string | Function;
            selector?: string;
            template?: string;
            title?: string;
            trigger?: string;
    }
    
    /**
        * Tooltip Properties
        */
    export interface ITooltipProps {
            btnType?: number;
            className?: string;
            el?: Element | HTMLElement;
            options?: ITooltipOptions;
            text?: string;
            type?: number;
    }
    
    /**
        * Tooltip Types
        */
    export type ITooltipTypes = {
            Auto: number;
            Bottom: number;
            Left: number;
            Right: number;
            Top: number;
    }
}

declare module 'gd-bs/base' {
    /**
        * Base
        */
    export interface IBase<IProps = IBaseProps> {
            /** Internal method to configure the parent element. */
            configureParent(): Element;
    
            /** The component HTML element */
            el: Element | HTMLElement;
    
            /** Hides the component. */
            hide(): void;
    
            /** The component properties */
            props: IProps;
    
            /** Shows the component. */
            show(): void;
    }
    
    /**
        * Base Properties
        */
    export interface IBaseProps {
            /** Custom class names. */
            className?: string;
    
            /** The element to render the component to. */
            el?: Element | HTMLElement;
    }
}

