// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../jquery

declare module 'gd-bs' {
    import * as Components from "gd-bs/components";
    import * as Icons from "gd-bs/icons";
    import * as jQuery from "jquery";
    export {
        Components,
        Icons,
        jQuery
    }
}

declare module 'gd-bs/components' {
    export * from "gd-bs/components/accordion";
    export * from "gd-bs/components/alert";
    export * from "gd-bs/components/badge";
    export * from "gd-bs/components/breadcrumb";
    export * from "gd-bs/components/button";
    export * from "gd-bs/components/buttonGroup";
    export * from "gd-bs/components/card";
    export * from "gd-bs/components/cardGroup";
    export * from "gd-bs/components/carousel";
    export * from "gd-bs/components/checkboxGroup";
    export * from "gd-bs/components/collapse";
    export * from "gd-bs/components/dropdown";
    export * from "gd-bs/components/form";
    export * from "gd-bs/components/formControl";
    export * from "gd-bs/components/inputGroup";
    export * from "gd-bs/components/jumbotron";
    export * from "gd-bs/components/listGroup";
    export * from "gd-bs/components/modal";
    export * from "gd-bs/components/nav";
    export * from "gd-bs/components/navbar";
    export * from "gd-bs/components/pagination";
    export * from "gd-bs/components/panel";
    export * from "gd-bs/components/popover";
    export * from "gd-bs/components/progress";
    export * from "gd-bs/components/progressGroup";
    export * from "gd-bs/components/spinner";
    export * from "gd-bs/components/table";
    export * from "gd-bs/components/toast";
    export * from "gd-bs/components/toolbar";
    export * from "gd-bs/components/tooltip";
}

declare module 'gd-bs/icons' {
    export const AlarmFill: (height?: number, width?: number) => HTMLElement;
    export const Alarm: (height?: number, width?: number) => HTMLElement;
    export const AlertCircleFill: (height?: number, width?: number) => HTMLElement;
    export const AlertCircle: (height?: number, width?: number) => HTMLElement;
    export const AlertOctagonFill: (height?: number, width?: number) => HTMLElement;
    export const AlertOctagon: (height?: number, width?: number) => HTMLElement;
    export const AlertSquareFill: (height?: number, width?: number) => HTMLElement;
    export const AlertSquare: (height?: number, width?: number) => HTMLElement;
    export const AlertTriangleFill: (height?: number, width?: number) => HTMLElement;
    export const AlertTriangle: (height?: number, width?: number) => HTMLElement;
    export const ArchiveFill: (height?: number, width?: number) => HTMLElement;
    export const Archive: (height?: number, width?: number) => HTMLElement;
    export const ArrowBarBottom: (height?: number, width?: number) => HTMLElement;
    export const ArrowBarLeft: (height?: number, width?: number) => HTMLElement;
    export const ArrowBarRight: (height?: number, width?: number) => HTMLElement;
    export const ArrowBarUp: (height?: number, width?: number) => HTMLElement;
    export const ArrowClockwise: (height?: number, width?: number) => HTMLElement;
    export const ArrowCounterclockwise: (height?: number, width?: number) => HTMLElement;
    export const ArrowDownLeft: (height?: number, width?: number) => HTMLElement;
    export const ArrowDownRight: (height?: number, width?: number) => HTMLElement;
    export const ArrowDownShort: (height?: number, width?: number) => HTMLElement;
    export const ArrowDown: (height?: number, width?: number) => HTMLElement;
    export const ArrowLeftRight: (height?: number, width?: number) => HTMLElement;
    export const ArrowLeftShort: (height?: number, width?: number) => HTMLElement;
    export const ArrowLeft: (height?: number, width?: number) => HTMLElement;
    export const ArrowRepeat: (height?: number, width?: number) => HTMLElement;
    export const ArrowRightShort: (height?: number, width?: number) => HTMLElement;
    export const ArrowRight: (height?: number, width?: number) => HTMLElement;
    export const ArrowUpDown: (height?: number, width?: number) => HTMLElement;
    export const ArrowUpLeft: (height?: number, width?: number) => HTMLElement;
    export const ArrowUpRight: (height?: number, width?: number) => HTMLElement;
    export const ArrowUpShort: (height?: number, width?: number) => HTMLElement;
    export const ArrowUp: (height?: number, width?: number) => HTMLElement;
    export const ArrowsAngleContract: (height?: number, width?: number) => HTMLElement;
    export const ArrowsAngleExpand: (height?: number, width?: number) => HTMLElement;
    export const ArrowsCollapse: (height?: number, width?: number) => HTMLElement;
    export const ArrowsExpand: (height?: number, width?: number) => HTMLElement;
    export const ArrowsFullscreen: (height?: number, width?: number) => HTMLElement;
    export const At: (height?: number, width?: number) => HTMLElement;
    export const Award: (height?: number, width?: number) => HTMLElement;
    export const BackspaceFill: (height?: number, width?: number) => HTMLElement;
    export const BackspaceReverseFill: (height?: number, width?: number) => HTMLElement;
    export const BackspaceReverse: (height?: number, width?: number) => HTMLElement;
    export const Backspace: (height?: number, width?: number) => HTMLElement;
    export const BarChartFill: (height?: number, width?: number) => HTMLElement;
    export const BarChart: (height?: number, width?: number) => HTMLElement;
    export const BatteryCharging: (height?: number, width?: number) => HTMLElement;
    export const BatteryFull: (height?: number, width?: number) => HTMLElement;
    export const Battery: (height?: number, width?: number) => HTMLElement;
    export const BellFill: (height?: number, width?: number) => HTMLElement;
    export const Bell: (height?: number, width?: number) => HTMLElement;
    export const BlockquoteLeft: (height?: number, width?: number) => HTMLElement;
    export const BlockquoteRight: (height?: number, width?: number) => HTMLElement;
    export const BookHalfFill: (height?: number, width?: number) => HTMLElement;
    export const Book: (height?: number, width?: number) => HTMLElement;
    export const BookmarkFill: (height?: number, width?: number) => HTMLElement;
    export const Bookmark: (height?: number, width?: number) => HTMLElement;
    export const BootstrapFill: (height?: number, width?: number) => HTMLElement;
    export const BootstrapReboot: (height?: number, width?: number) => HTMLElement;
    export const Bootstrap: (height?: number, width?: number) => HTMLElement;
    export const BoxArrowBottomLeft: (height?: number, width?: number) => HTMLElement;
    export const BoxArrowBottomRight: (height?: number, width?: number) => HTMLElement;
    export const BoxArrowDown: (height?: number, width?: number) => HTMLElement;
    export const BoxArrowLeft: (height?: number, width?: number) => HTMLElement;
    export const BoxArrowRight: (height?: number, width?: number) => HTMLElement;
    export const BoxArrowUpLeft: (height?: number, width?: number) => HTMLElement;
    export const BoxArrowUpRight: (height?: number, width?: number) => HTMLElement;
    export const BoxArrowUp: (height?: number, width?: number) => HTMLElement;
    export const Braces: (height?: number, width?: number) => HTMLElement;
    export const BrightnessFillHigh: (height?: number, width?: number) => HTMLElement;
    export const BrightnessFillLow: (height?: number, width?: number) => HTMLElement;
    export const BrightnessHigh: (height?: number, width?: number) => HTMLElement;
    export const BrightnessLow: (height?: number, width?: number) => HTMLElement;
    export const Brush: (height?: number, width?: number) => HTMLElement;
    export const BucketFill: (height?: number, width?: number) => HTMLElement;
    export const Bucket: (height?: number, width?: number) => HTMLElement;
    export const Building: (height?: number, width?: number) => HTMLElement;
    export const Bullseye: (height?: number, width?: number) => HTMLElement;
    export const CalendarFill: (height?: number, width?: number) => HTMLElement;
    export const Calendar: (height?: number, width?: number) => HTMLElement;
    export const CameraVideoFill: (height?: number, width?: number) => HTMLElement;
    export const CameraVideo: (height?: number, width?: number) => HTMLElement;
    export const Camera: (height?: number, width?: number) => HTMLElement;
    export const CapslockFill: (height?: number, width?: number) => HTMLElement;
    export const Capslock: (height?: number, width?: number) => HTMLElement;
    export const ChatFill: (height?: number, width?: number) => HTMLElement;
    export const Chat: (height?: number, width?: number) => HTMLElement;
    export const CheckBox: (height?: number, width?: number) => HTMLElement;
    export const CheckCircle: (height?: number, width?: number) => HTMLElement;
    export const Check: (height?: number, width?: number) => HTMLElement;
    export const ChevronCompactDown: (height?: number, width?: number) => HTMLElement;
    export const ChevronCompactLeft: (height?: number, width?: number) => HTMLElement;
    export const ChevronCompactRight: (height?: number, width?: number) => HTMLElement;
    export const ChevronCompactUp: (height?: number, width?: number) => HTMLElement;
    export const ChevronDown: (height?: number, width?: number) => HTMLElement;
    export const ChevronLeft: (height?: number, width?: number) => HTMLElement;
    export const ChevronRight: (height?: number, width?: number) => HTMLElement;
    export const ChevronUp: (height?: number, width?: number) => HTMLElement;
    export const CircleFill: (height?: number, width?: number) => HTMLElement;
    export const CircleHalf: (height?: number, width?: number) => HTMLElement;
    export const CircleSlash: (height?: number, width?: number) => HTMLElement;
    export const Circle: (height?: number, width?: number) => HTMLElement;
    export const ClockFill: (height?: number, width?: number) => HTMLElement;
    export const Clock: (height?: number, width?: number) => HTMLElement;
    export const CloudDownload: (height?: number, width?: number) => HTMLElement;
    export const CloudFill: (height?: number, width?: number) => HTMLElement;
    export const CloudUpload: (height?: number, width?: number) => HTMLElement;
    export const Cloud: (height?: number, width?: number) => HTMLElement;
    export const CodeSlash: (height?: number, width?: number) => HTMLElement;
    export const Code: (height?: number, width?: number) => HTMLElement;
    export const ColumnsGutters: (height?: number, width?: number) => HTMLElement;
    export const Columns: (height?: number, width?: number) => HTMLElement;
    export const Command: (height?: number, width?: number) => HTMLElement;
    export const Compass: (height?: number, width?: number) => HTMLElement;
    export const ConeStriped: (height?: number, width?: number) => HTMLElement;
    export const Cone: (height?: number, width?: number) => HTMLElement;
    export const Controller: (height?: number, width?: number) => HTMLElement;
    export const CreditCard: (height?: number, width?: number) => HTMLElement;
    export const CursorFill: (height?: number, width?: number) => HTMLElement;
    export const Cursor: (height?: number, width?: number) => HTMLElement;
    export const Dash: (height?: number, width?: number) => HTMLElement;
    export const DiamondHalf: (height?: number, width?: number) => HTMLElement;
    export const Diamond: (height?: number, width?: number) => HTMLElement;
    export const DisplayFill: (height?: number, width?: number) => HTMLElement;
    export const Display: (height?: number, width?: number) => HTMLElement;
    export const DocumentCode: (height?: number, width?: number) => HTMLElement;
    export const DocumentDiff: (height?: number, width?: number) => HTMLElement;
    export const DocumentRichtext: (height?: number, width?: number) => HTMLElement;
    export const DocumentSpreadsheet: (height?: number, width?: number) => HTMLElement;
    export const DocumentText: (height?: number, width?: number) => HTMLElement;
    export const Document: (height?: number, width?: number) => HTMLElement;
    export const DocumentsAlt: (height?: number, width?: number) => HTMLElement;
    export const Documents: (height?: number, width?: number) => HTMLElement;
    export const Dot: (height?: number, width?: number) => HTMLElement;
    export const Download: (height?: number, width?: number) => HTMLElement;
    export const EggFried: (height?: number, width?: number) => HTMLElement;
    export const EjectFill: (height?: number, width?: number) => HTMLElement;
    export const Eject: (height?: number, width?: number) => HTMLElement;
    export const EnvelopeFill: (height?: number, width?: number) => HTMLElement;
    export const EnvelopeOpenFill: (height?: number, width?: number) => HTMLElement;
    export const EnvelopeOpen: (height?: number, width?: number) => HTMLElement;
    export const Envelope: (height?: number, width?: number) => HTMLElement;
    export const EyeFill: (height?: number, width?: number) => HTMLElement;
    export const EyeSlashFill: (height?: number, width?: number) => HTMLElement;
    export const EyeSlash: (height?: number, width?: number) => HTMLElement;
    export const Eye: (height?: number, width?: number) => HTMLElement;
    export const Filter: (height?: number, width?: number) => HTMLElement;
    export const FlagFill: (height?: number, width?: number) => HTMLElement;
    export const Flag: (height?: number, width?: number) => HTMLElement;
    export const FolderFill: (height?: number, width?: number) => HTMLElement;
    export const FolderSymlinkFill: (height?: number, width?: number) => HTMLElement;
    export const FolderSymlink: (height?: number, width?: number) => HTMLElement;
    export const Folder: (height?: number, width?: number) => HTMLElement;
    export const Fonts: (height?: number, width?: number) => HTMLElement;
    export const ForwardFill: (height?: number, width?: number) => HTMLElement;
    export const Forward: (height?: number, width?: number) => HTMLElement;
    export const GearFill: (height?: number, width?: number) => HTMLElement;
    export const GearWideConnected: (height?: number, width?: number) => HTMLElement;
    export const GearWide: (height?: number, width?: number) => HTMLElement;
    export const Gear: (height?: number, width?: number) => HTMLElement;
    export const Geo: (height?: number, width?: number) => HTMLElement;
    export const GraphDown: (height?: number, width?: number) => HTMLElement;
    export const GraphUp: (height?: number, width?: number) => HTMLElement;
    export const GridFill: (height?: number, width?: number) => HTMLElement;
    export const Grid: (height?: number, width?: number) => HTMLElement;
    export const Hammer: (height?: number, width?: number) => HTMLElement;
    export const Hash: (height?: number, width?: number) => HTMLElement;
    export const HeartFill: (height?: number, width?: number) => HTMLElement;
    export const Heart: (height?: number, width?: number) => HTMLElement;
    export const HouseFill: (height?: number, width?: number) => HTMLElement;
    export const House: (height?: number, width?: number) => HTMLElement;
    export const ImageAlt: (height?: number, width?: number) => HTMLElement;
    export const ImageFill: (height?: number, width?: number) => HTMLElement;
    export const Image: (height?: number, width?: number) => HTMLElement;
    export const Images: (height?: number, width?: number) => HTMLElement;
    export const InboxFill: (height?: number, width?: number) => HTMLElement;
    export const Inbox: (height?: number, width?: number) => HTMLElement;
    export const InboxesFill: (height?: number, width?: number) => HTMLElement;
    export const Inboxes: (height?: number, width?: number) => HTMLElement;
    export const InfoFill: (height?: number, width?: number) => HTMLElement;
    export const InfoSquareFill: (height?: number, width?: number) => HTMLElement;
    export const InfoSquare: (height?: number, width?: number) => HTMLElement;
    export const Info: (height?: number, width?: number) => HTMLElement;
    export const JustifyLeft: (height?: number, width?: number) => HTMLElement;
    export const JustifyRight: (height?: number, width?: number) => HTMLElement;
    export const Justify: (height?: number, width?: number) => HTMLElement;
    export const KanbanFill: (height?: number, width?: number) => HTMLElement;
    export const Kanban: (height?: number, width?: number) => HTMLElement;
    export const Laptop: (height?: number, width?: number) => HTMLElement;
    export const LayoutSidebarReverse: (height?: number, width?: number) => HTMLElement;
    export const LayoutSidebar: (height?: number, width?: number) => HTMLElement;
    export const LayoutSplit: (height?: number, width?: number) => HTMLElement;
    export const ListCheck: (height?: number, width?: number) => HTMLElement;
    export const ListOl: (height?: number, width?: number) => HTMLElement;
    export const ListTask: (height?: number, width?: number) => HTMLElement;
    export const ListUl: (height?: number, width?: number) => HTMLElement;
    export const List: (height?: number, width?: number) => HTMLElement;
    export const LockFill: (height?: number, width?: number) => HTMLElement;
    export const Lock: (height?: number, width?: number) => HTMLElement;
    export const Map: (height?: number, width?: number) => HTMLElement;
    export const Mic: (height?: number, width?: number) => HTMLElement;
    export const Moon: (height?: number, width?: number) => HTMLElement;
    export const MusicPlayerFill: (height?: number, width?: number) => HTMLElement;
    export const MusicPlayer: (height?: number, width?: number) => HTMLElement;
    export const Option: (height?: number, width?: number) => HTMLElement;
    export const Outlet: (height?: number, width?: number) => HTMLElement;
    export const PauseFill: (height?: number, width?: number) => HTMLElement;
    export const Pause: (height?: number, width?: number) => HTMLElement;
    export const Pen: (height?: number, width?: number) => HTMLElement;
    export const Pencil: (height?: number, width?: number) => HTMLElement;
    export const PeopleFill: (height?: number, width?: number) => HTMLElement;
    export const People: (height?: number, width?: number) => HTMLElement;
    export const PersonFill: (height?: number, width?: number) => HTMLElement;
    export const Person: (height?: number, width?: number) => HTMLElement;
    export const PhoneLandscape: (height?: number, width?: number) => HTMLElement;
    export const Phone: (height?: number, width?: number) => HTMLElement;
    export const PieChartFill: (height?: number, width?: number) => HTMLElement;
    export const PieChart: (height?: number, width?: number) => HTMLElement;
    export const PlayFill: (height?: number, width?: number) => HTMLElement;
    export const Play: (height?: number, width?: number) => HTMLElement;
    export const Plug: (height?: number, width?: number) => HTMLElement;
    export const Plus: (height?: number, width?: number) => HTMLElement;
    export const Power: (height?: number, width?: number) => HTMLElement;
    export const QuestionFill: (height?: number, width?: number) => HTMLElement;
    export const QuestionSquareFill: (height?: number, width?: number) => HTMLElement;
    export const QuestionSquare: (height?: number, width?: number) => HTMLElement;
    export const Question: (height?: number, width?: number) => HTMLElement;
    export const ReplyAllFill: (height?: number, width?: number) => HTMLElement;
    export const ReplyAll: (height?: number, width?: number) => HTMLElement;
    export const ReplyFill: (height?: number, width?: number) => HTMLElement;
    export const Reply: (height?: number, width?: number) => HTMLElement;
    export const Screwdriver: (height?: number, width?: number) => HTMLElement;
    export const Search: (height?: number, width?: number) => HTMLElement;
    export const ShieldFill: (height?: number, width?: number) => HTMLElement;
    export const ShieldLockFill: (height?: number, width?: number) => HTMLElement;
    export const ShieldLock: (height?: number, width?: number) => HTMLElement;
    export const ShieldShaded: (height?: number, width?: number) => HTMLElement;
    export const Shield: (height?: number, width?: number) => HTMLElement;
    export const ShiftFill: (height?: number, width?: number) => HTMLElement;
    export const Shift: (height?: number, width?: number) => HTMLElement;
    export const SkipBackwardFill: (height?: number, width?: number) => HTMLElement;
    export const SkipBackward: (height?: number, width?: number) => HTMLElement;
    export const SkipEndFill: (height?: number, width?: number) => HTMLElement;
    export const SkipEnd: (height?: number, width?: number) => HTMLElement;
    export const SkipForwardFill: (height?: number, width?: number) => HTMLElement;
    export const SkipForward: (height?: number, width?: number) => HTMLElement;
    export const SkipStartFill: (height?: number, width?: number) => HTMLElement;
    export const SkipStart: (height?: number, width?: number) => HTMLElement;
    export const Speaker: (height?: number, width?: number) => HTMLElement;
    export const SquareFill: (height?: number, width?: number) => HTMLElement;
    export const SquareHalf: (height?: number, width?: number) => HTMLElement;
    export const Square: (height?: number, width?: number) => HTMLElement;
    export const StarFill: (height?: number, width?: number) => HTMLElement;
    export const StarHalf: (height?: number, width?: number) => HTMLElement;
    export const Star: (height?: number, width?: number) => HTMLElement;
    export const StopFill: (height?: number, width?: number) => HTMLElement;
    export const Stop: (height?: number, width?: number) => HTMLElement;
    export const StopwatchFill: (height?: number, width?: number) => HTMLElement;
    export const Stopwatch: (height?: number, width?: number) => HTMLElement;
    export const Sun: (height?: number, width?: number) => HTMLElement;
    export const Table: (height?: number, width?: number) => HTMLElement;
    export const TabletLandscape: (height?: number, width?: number) => HTMLElement;
    export const Tablet: (height?: number, width?: number) => HTMLElement;
    export const TagFill: (height?: number, width?: number) => HTMLElement;
    export const Tag: (height?: number, width?: number) => HTMLElement;
    export const TerminalFill: (height?: number, width?: number) => HTMLElement;
    export const Terminal: (height?: number, width?: number) => HTMLElement;
    export const TextCenter: (height?: number, width?: number) => HTMLElement;
    export const TextIndentLeft: (height?: number, width?: number) => HTMLElement;
    export const TextIndentRight: (height?: number, width?: number) => HTMLElement;
    export const TextLeft: (height?: number, width?: number) => HTMLElement;
    export const TextRight: (height?: number, width?: number) => HTMLElement;
    export const ThreeDotsVertical: (height?: number, width?: number) => HTMLElement;
    export const ThreeDots: (height?: number, width?: number) => HTMLElement;
    export const ToggleOff: (height?: number, width?: number) => HTMLElement;
    export const ToggleOn: (height?: number, width?: number) => HTMLElement;
    export const Toggles: (height?: number, width?: number) => HTMLElement;
    export const Tools: (height?: number, width?: number) => HTMLElement;
    export const TrashFill: (height?: number, width?: number) => HTMLElement;
    export const Trash: (height?: number, width?: number) => HTMLElement;
    export const TriangleFill: (height?: number, width?: number) => HTMLElement;
    export const TriangleHalf: (height?: number, width?: number) => HTMLElement;
    export const Triangle: (height?: number, width?: number) => HTMLElement;
    export const Trophy: (height?: number, width?: number) => HTMLElement;
    export const TvFill: (height?: number, width?: number) => HTMLElement;
    export const Tv: (height?: number, width?: number) => HTMLElement;
    export const TypeBold: (height?: number, width?: number) => HTMLElement;
    export const TypeH1: (height?: number, width?: number) => HTMLElement;
    export const TypeH2: (height?: number, width?: number) => HTMLElement;
    export const TypeH3: (height?: number, width?: number) => HTMLElement;
    export const TypeItalic: (height?: number, width?: number) => HTMLElement;
    export const TypeStrikethrough: (height?: number, width?: number) => HTMLElement;
    export const TypeUnderline: (height?: number, width?: number) => HTMLElement;
    export const Type: (height?: number, width?: number) => HTMLElement;
    export const UnlockFill: (height?: number, width?: number) => HTMLElement;
    export const Unlock: (height?: number, width?: number) => HTMLElement;
    export const Upload: (height?: number, width?: number) => HTMLElement;
    export const VolumeDownFill: (height?: number, width?: number) => HTMLElement;
    export const VolumeDown: (height?: number, width?: number) => HTMLElement;
    export const VolumeMuteFill: (height?: number, width?: number) => HTMLElement;
    export const VolumeMute: (height?: number, width?: number) => HTMLElement;
    export const VolumeUpFill: (height?: number, width?: number) => HTMLElement;
    export const VolumeUp: (height?: number, width?: number) => HTMLElement;
    export const Wallet: (height?: number, width?: number) => HTMLElement;
    export const Watch: (height?: number, width?: number) => HTMLElement;
    export const Wifi: (height?: number, width?: number) => HTMLElement;
    export const Window: (height?: number, width?: number) => HTMLElement;
    export const Wrench: (height?: number, width?: number) => HTMLElement;
    export const XCircleFill: (height?: number, width?: number) => HTMLElement;
    export const XCircle: (height?: number, width?: number) => HTMLElement;
    export const XOctagonFill: (height?: number, width?: number) => HTMLElement;
    export const XOctagon: (height?: number, width?: number) => HTMLElement;
    export const XSquareFill: (height?: number, width?: number) => HTMLElement;
    export const XSquare: (height?: number, width?: number) => HTMLElement;
    export const X: (height?: number, width?: number) => HTMLElement;
    export const byType = (iconType:number) => HTMLOrSVGElement;
    export const IconTypes: {
        // alarm-fill.svg
        alarmFill: number;
        // alarm.svg
        alarm: number;
        // alert-circle-fill.svg
        alertCircleFill: number;
        // alert-circle.svg
        alertCircle: number;
        // alert-octagon-fill.svg
        alertOctagonFill: number;
        // alert-octagon.svg
        alertOctagon: number;
        // alert-square-fill.svg
        alertSquareFill: number;
        // alert-square.svg
        alertSquare: number;
        // alert-triangle-fill.svg
        alertTriangleFill: number;
        // alert-triangle.svg
        alertTriangle: number;
        // archive-fill.svg
        archiveFill: number;
        // archive.svg
        archive: number;
        // arrow-bar-bottom.svg
        arrowBarBottom: number;
        // arrow-bar-left.svg
        arrowBarLeft: number;
        // arrow-bar-right.svg
        arrowBarRight: number;
        // arrow-bar-up.svg
        arrowBarUp: number;
        // arrow-clockwise.svg
        arrowClockwise: number;
        // arrow-counterclockwise.svg
        arrowCounterclockwise: number;
        // arrow-down-left.svg
        arrowDownLeft: number;
        // arrow-down-right.svg
        arrowDownRight: number;
        // arrow-down-short.svg
        arrowDownShort: number;
        // arrow-down.svg
        arrowDown: number;
        // arrow-left-right.svg
        arrowLeftRight: number;
        // arrow-left-short.svg
        arrowLeftShort: number;
        // arrow-left.svg
        arrowLeft: number;
        // arrow-repeat.svg
        arrowRepeat: number;
        // arrow-right-short.svg
        arrowRightShort: number;
        // arrow-right.svg
        arrowRight: number;
        // arrow-up-down.svg
        arrowUpDown: number;
        // arrow-up-left.svg
        arrowUpLeft: number;
        // arrow-up-right.svg
        arrowUpRight: number;
        // arrow-up-short.svg
        arrowUpShort: number;
        // arrow-up.svg
        arrowUp: number;
        // arrows-angle-contract.svg
        arrowsAngleContract: number;
        // arrows-angle-expand.svg
        arrowsAngleExpand: number;
        // arrows-collapse.svg
        arrowsCollapse: number;
        // arrows-expand.svg
        arrowsExpand: number;
        // arrows-fullscreen.svg
        arrowsFullscreen: number;
        // at.svg
        at: number;
        // award.svg
        award: number;
        // backspace-fill.svg
        backspaceFill: number;
        // backspace-reverse-fill.svg
        backspaceReverseFill: number;
        // backspace-reverse.svg
        backspaceReverse: number;
        // backspace.svg
        backspace: number;
        // bar-chart-fill.svg
        barChartFill: number;
        // bar-chart.svg
        barChart: number;
        // battery-charging.svg
        batteryCharging: number;
        // battery-full.svg
        batteryFull: number;
        // battery.svg
        battery: number;
        // bell-fill.svg
        bellFill: number;
        // bell.svg
        bell: number;
        // blockquote-left.svg
        blockquoteLeft: number;
        // blockquote-right.svg
        blockquoteRight: number;
        // book-half-fill.svg
        bookHalfFill: number;
        // book.svg
        book: number;
        // bookmark-fill.svg
        bookmarkFill: number;
        // bookmark.svg
        bookmark: number;
        // bootstrap-fill.svg
        bootstrapFill: number;
        // bootstrap-reboot.svg
        bootstrapReboot: number;
        // bootstrap.svg
        bootstrap: number;
        // box-arrow-bottom-left.svg
        boxArrowBottomLeft: number;
        // box-arrow-bottom-right.svg
        boxArrowBottomRight: number;
        // box-arrow-down.svg
        boxArrowDown: number;
        // box-arrow-left.svg
        boxArrowLeft: number;
        // box-arrow-right.svg
        boxArrowRight: number;
        // box-arrow-up-left.svg
        boxArrowUpLeft: number;
        // box-arrow-up-right.svg
        boxArrowUpRight: number;
        // box-arrow-up.svg
        boxArrowUp: number;
        // braces.svg
        braces: number;
        // brightness-fill-high.svg
        brightnessFillHigh: number;
        // brightness-fill-low.svg
        brightnessFillLow: number;
        // brightness-high.svg
        brightnessHigh: number;
        // brightness-low.svg
        brightnessLow: number;
        // brush.svg
        brush: number;
        // bucket-fill.svg
        bucketFill: number;
        // bucket.svg
        bucket: number;
        // building.svg
        building: number;
        // bullseye.svg
        bullseye: number;
        // calendar-fill.svg
        calendarFill: number;
        // calendar.svg
        calendar: number;
        // camera-video-fill.svg
        cameraVideoFill: number;
        // camera-video.svg
        cameraVideo: number;
        // camera.svg
        camera: number;
        // capslock-fill.svg
        capslockFill: number;
        // capslock.svg
        capslock: number;
        // chat-fill.svg
        chatFill: number;
        // chat.svg
        chat: number;
        // check-box.svg
        checkBox: number;
        // check-circle.svg
        checkCircle: number;
        // check.svg
        check: number;
        // chevron-compact-down.svg
        chevronCompactDown: number;
        // chevron-compact-left.svg
        chevronCompactLeft: number;
        // chevron-compact-right.svg
        chevronCompactRight: number;
        // chevron-compact-up.svg
        chevronCompactUp: number;
        // chevron-down.svg
        chevronDown: number;
        // chevron-left.svg
        chevronLeft: number;
        // chevron-right.svg
        chevronRight: number;
        // chevron-up.svg
        chevronUp: number;
        // circle-fill.svg
        circleFill: number;
        // circle-half.svg
        circleHalf: number;
        // circle-slash.svg
        circleSlash: number;
        // circle.svg
        circle: number;
        // clock-fill.svg
        clockFill: number;
        // clock.svg
        clock: number;
        // cloud-download.svg
        cloudDownload: number;
        // cloud-fill.svg
        cloudFill: number;
        // cloud-upload.svg
        cloudUpload: number;
        // cloud.svg
        cloud: number;
        // code-slash.svg
        codeSlash: number;
        // code.svg
        code: number;
        // columns-gutters.svg
        columnsGutters: number;
        // columns.svg
        columns: number;
        // command.svg
        command: number;
        // compass.svg
        compass: number;
        // cone-striped.svg
        coneStriped: number;
        // cone.svg
        cone: number;
        // controller.svg
        controller: number;
        // credit-card.svg
        creditCard: number;
        // cursor-fill.svg
        cursorFill: number;
        // cursor.svg
        cursor: number;
        // dash.svg
        dash: number;
        // diamond-half.svg
        diamondHalf: number;
        // diamond.svg
        diamond: number;
        // display-fill.svg
        displayFill: number;
        // display.svg
        display: number;
        // document-code.svg
        documentCode: number;
        // document-diff.svg
        documentDiff: number;
        // document-richtext.svg
        documentRichtext: number;
        // document-spreadsheet.svg
        documentSpreadsheet: number;
        // document-text.svg
        documentText: number;
        // document.svg
        document: number;
        // documents-alt.svg
        documentsAlt: number;
        // documents.svg
        documents: number;
        // dot.svg
        dot: number;
        // download.svg
        download: number;
        // egg-fried.svg
        eggFried: number;
        // eject-fill.svg
        ejectFill: number;
        // eject.svg
        eject: number;
        // envelope-fill.svg
        envelopeFill: number;
        // envelope-open-fill.svg
        envelopeOpenFill: number;
        // envelope-open.svg
        envelopeOpen: number;
        // envelope.svg
        envelope: number;
        // eye-fill.svg
        eyeFill: number;
        // eye-slash-fill.svg
        eyeSlashFill: number;
        // eye-slash.svg
        eyeSlash: number;
        // eye.svg
        eye: number;
        // filter.svg
        filter: number;
        // flag-fill.svg
        flagFill: number;
        // flag.svg
        flag: number;
        // folder-fill.svg
        folderFill: number;
        // folder-symlink-fill.svg
        folderSymlinkFill: number;
        // folder-symlink.svg
        folderSymlink: number;
        // folder.svg
        folder: number;
        // fonts.svg
        fonts: number;
        // forward-fill.svg
        forwardFill: number;
        // forward.svg
        forward: number;
        // gear-fill.svg
        gearFill: number;
        // gear-wide-connected.svg
        gearWideConnected: number;
        // gear-wide.svg
        gearWide: number;
        // gear.svg
        gear: number;
        // geo.svg
        geo: number;
        // graph-down.svg
        graphDown: number;
        // graph-up.svg
        graphUp: number;
        // grid-fill.svg
        gridFill: number;
        // grid.svg
        grid: number;
        // hammer.svg
        hammer: number;
        // hash.svg
        hash: number;
        // heart-fill.svg
        heartFill: number;
        // heart.svg
        heart: number;
        // house-fill.svg
        houseFill: number;
        // house.svg
        house: number;
        // image-alt.svg
        imageAlt: number;
        // image-fill.svg
        imageFill: number;
        // image.svg
        image: number;
        // images.svg
        images: number;
        // inbox-fill.svg
        inboxFill: number;
        // inbox.svg
        inbox: number;
        // inboxes-fill.svg
        inboxesFill: number;
        // inboxes.svg
        inboxes: number;
        // info-fill.svg
        infoFill: number;
        // info-square-fill.svg
        infoSquareFill: number;
        // info-square.svg
        infoSquare: number;
        // info.svg
        info: number;
        // justify-left.svg
        justifyLeft: number;
        // justify-right.svg
        justifyRight: number;
        // justify.svg
        justify: number;
        // kanban-fill.svg
        kanbanFill: number;
        // kanban.svg
        kanban: number;
        // laptop.svg
        laptop: number;
        // layout-sidebar-reverse.svg
        layoutSidebarReverse: number;
        // layout-sidebar.svg
        layoutSidebar: number;
        // layout-split.svg
        layoutSplit: number;
        // list-check.svg
        listCheck: number;
        // list-ol.svg
        listOl: number;
        // list-task.svg
        listTask: number;
        // list-ul.svg
        listUl: number;
        // list.svg
        list: number;
        // lock-fill.svg
        lockFill: number;
        // lock.svg
        lock: number;
        // map.svg
        map: number;
        // mic.svg
        mic: number;
        // moon.svg
        moon: number;
        // music-player-fill.svg
        musicPlayerFill: number;
        // music-player.svg
        musicPlayer: number;
        // option.svg
        option: number;
        // outlet.svg
        outlet: number;
        // pause-fill.svg
        pauseFill: number;
        // pause.svg
        pause: number;
        // pen.svg
        pen: number;
        // pencil.svg
        pencil: number;
        // people-fill.svg
        peopleFill: number;
        // people.svg
        people: number;
        // person-fill.svg
        personFill: number;
        // person.svg
        person: number;
        // phone-landscape.svg
        phoneLandscape: number;
        // phone.svg
        phone: number;
        // pie-chart-fill.svg
        pieChartFill: number;
        // pie-chart.svg
        pieChart: number;
        // play-fill.svg
        playFill: number;
        // play.svg
        play: number;
        // plug.svg
        plug: number;
        // plus.svg
        plus: number;
        // power.svg
        power: number;
        // question-fill.svg
        questionFill: number;
        // question-square-fill.svg
        questionSquareFill: number;
        // question-square.svg
        questionSquare: number;
        // question.svg
        question: number;
        // reply-all-fill.svg
        replyAllFill: number;
        // reply-all.svg
        replyAll: number;
        // reply-fill.svg
        replyFill: number;
        // reply.svg
        reply: number;
        // screwdriver.svg
        screwdriver: number;
        // search.svg
        search: number;
        // shield-fill.svg
        shieldFill: number;
        // shield-lock-fill.svg
        shieldLockFill: number;
        // shield-lock.svg
        shieldLock: number;
        // shield-shaded.svg
        shieldShaded: number;
        // shield.svg
        shield: number;
        // shift-fill.svg
        shiftFill: number;
        // shift.svg
        shift: number;
        // skip-backward-fill.svg
        skipBackwardFill: number;
        // skip-backward.svg
        skipBackward: number;
        // skip-end-fill.svg
        skipEndFill: number;
        // skip-end.svg
        skipEnd: number;
        // skip-forward-fill.svg
        skipForwardFill: number;
        // skip-forward.svg
        skipForward: number;
        // skip-start-fill.svg
        skipStartFill: number;
        // skip-start.svg
        skipStart: number;
        // speaker.svg
        speaker: number;
        // square-fill.svg
        squareFill: number;
        // square-half.svg
        squareHalf: number;
        // square.svg
        square: number;
        // star-fill.svg
        starFill: number;
        // star-half.svg
        starHalf: number;
        // star.svg
        star: number;
        // stop-fill.svg
        stopFill: number;
        // stop.svg
        stop: number;
        // stopwatch-fill.svg
        stopwatchFill: number;
        // stopwatch.svg
        stopwatch: number;
        // sun.svg
        sun: number;
        // table.svg
        table: number;
        // tablet-landscape.svg
        tabletLandscape: number;
        // tablet.svg
        tablet: number;
        // tag-fill.svg
        tagFill: number;
        // tag.svg
        tag: number;
        // terminal-fill.svg
        terminalFill: number;
        // terminal.svg
        terminal: number;
        // text-center.svg
        textCenter: number;
        // text-indent-left.svg
        textIndentLeft: number;
        // text-indent-right.svg
        textIndentRight: number;
        // text-left.svg
        textLeft: number;
        // text-right.svg
        textRight: number;
        // three-dots-vertical.svg
        threeDotsVertical: number;
        // three-dots.svg
        threeDots: number;
        // toggle-off.svg
        toggleOff: number;
        // toggle-on.svg
        toggleOn: number;
        // toggles.svg
        toggles: number;
        // tools.svg
        tools: number;
        // trash-fill.svg
        trashFill: number;
        // trash.svg
        trash: number;
        // triangle-fill.svg
        triangleFill: number;
        // triangle-half.svg
        triangleHalf: number;
        // triangle.svg
        triangle: number;
        // trophy.svg
        trophy: number;
        // tv-fill.svg
        tvFill: number;
        // tv.svg
        tv: number;
        // type-bold.svg
        typeBold: number;
        // type-h1.svg
        typeH1: number;
        // type-h2.svg
        typeH2: number;
        // type-h3.svg
        typeH3: number;
        // type-italic.svg
        typeItalic: number;
        // type-strikethrough.svg
        typeStrikethrough: number;
        // type-underline.svg
        typeUnderline: number;
        // type.svg
        type: number;
        // unlock-fill.svg
        unlockFill: number;
        // unlock.svg
        unlock: number;
        // upload.svg
        upload: number;
        // volume-down-fill.svg
        volumeDownFill: number;
        // volume-down.svg
        volumeDown: number;
        // volume-mute-fill.svg
        volumeMuteFill: number;
        // volume-mute.svg
        volumeMute: number;
        // volume-up-fill.svg
        volumeUpFill: number;
        // volume-up.svg
        volumeUp: number;
        // wallet.svg
        wallet: number;
        // watch.svg
        watch: number;
        // wifi.svg
        wifi: number;
        // window.svg
        window: number;
        // wrench.svg
        wrench: number;
        // x-circle-fill.svg
        xCircleFill: number;
        // x-circle.svg
        xCircle: number;
        // x-octagon-fill.svg
        xOctagonFill: number;
        // x-octagon.svg
        xOctagon: number;
        // x-square-fill.svg
        xSquareFill: number;
        // x-square.svg
        xSquare: number;
        // x.svg
        x: number;
    }
}

declare module 'gd-bs/components/accordion' {
    import { IButtonProps } from "gd-bs/components/button";
    import { ICollapseOptions } from "gd-bs/components/collapse";
    
    /**
        * Accordion
        */
    export const Accordion: (props: IAccordionProps) => IAccordion;
    
    /**
        * Accordion
        */
    export interface IAccordion {
            /** The element. */
            el: Element;
    
            /** Hides the accordion. */
            hide: () => void;
    
            /** Shows the accordion. */
            show: () => void;
    }
    
    /**
        * Accordion Item
        */
    export interface IAccordionItem {
            btnProps?: IButtonProps;
            data?: any;
            content?: string;
            onClick?: (el?: HTMLElement, item?: IAccordionItem) => void;
            onRender?: (el?: HTMLElement, item?: IAccordionItem) => void;
            showFl?: boolean;
    }
    
    /**
        * Accordion Options
        */
    export interface IAccordionOptions extends ICollapseOptions { }
    
    /**
        * Accordion Properties
        */
    export interface IAccordionProps {
            className?: string;
            el?: Element | HTMLElement;
            id?: string;
            items?: Array<IAccordionItem>;
            options?: IAccordionOptions;
    }
}

declare module 'gd-bs/components/alert' {
    /**
        * Alert
        */
    export const Alert: (props: IAlertProps) => IAlert;
    
    /**
        * Alert Types
        */
    export const AlertTypes: IAlertTypes;
    
    /**
        * Alert
        */
    export interface IAlert {
            /** Closes an alert by removing it from the DOM. */
            close: () => void;
    
            /** Destroys an element’s alert. */
            dispose: () => void;
    
            /** The element. */
            el: Element;
    
            /** Hides the alert. */
            hide: () => void;
    
            /** Updates the alert text. */
            setText: (alertText?: string) => void;
    
            /** Updates the alert type. */
            setType: (alertType: number) => void;
    
            /** Shows the alert. */
            show: () => void;
    }
    
    /**
        * Alert Properties
        */
    export interface IAlertProps {
            className?: string;
            content?: string;
            el?: Element | HTMLElement;
            header?: string;
            isDismissible?: boolean;
            type?: number;
    }
    
    /**
        * Alert Types
        */
    export type IAlertTypes = {
            Danger: number;
            Dark: number;
            Info: number;
            Light: number;
            Primary: number;
            Secondary: number;
            Success: number;
            Warning: number;
    }
}

declare module 'gd-bs/components/badge' {
    /**
        * Badge
        */
    export const Badge: (props: IBadgeProps) => IBadge;
    
    /**
        * Badge Types
        */
    export const BadgeTypes: IBadgeTypes;
    
    /**
        * Badge
        */
    export interface IBadge {
            /** The element. */
            el: Element;
    
            /** Hides the badge. */
            hide: () => void;
    
            /** Shows the badge. */
            show: () => void;
    }
    
    /**
        * Badge Properties
        */
    export interface IBadgeProps {
            className?: string;
            content?: string;
            data?: any;
            el?: Element | HTMLElement;
            header?: string;
            href?: string;
            isPill?: boolean;
            onClick?: (badge?: IBadgeProps, ev?: Event) => void;
            type?: number;
    }
    
    /**
        * Badge Types
        */
    export type IBadgeTypes = {
            Danger: number;
            Dark: number;
            Info: number;
            Light: number;
            Primary: number;
            Secondary: number;
            Success: number;
            Warning: number;
    }
}

declare module 'gd-bs/components/breadcrumb' {
    /**
        * Breadcrumb
        */
    export const Breadcrumb: (props: IBreadcrumbProps) => IBreadcrumb;
    
    /**
        * Breadcrumb
        */
    export interface IBreadcrumb {
            /** The element. */
            el: Element;
    
            /** Hides the breadcrumb. */
            hide: () => void;
    
            /** Shows the breadcrumb. */
            show: () => void;
    }
    
    /**
        * Breadcrumb Item
        */
    export interface IBreadcrumbItem {
            href?: string;
            onClick?: (item?: IBreadcrumbItem, ev?: Event) => void;
            text?: string;    
    }
    
    /**
        * Breadcrumb Properties
        */
    export interface IBreadcrumbProps {
            className?: string;
            el?: Element | HTMLElement;
            items?: Array<IBreadcrumbItem>
            onClick?: (item?: IBreadcrumbItem, ev?: Event) => void;
    }
}

declare module 'gd-bs/components/button' {
    import { IBadgeProps } from "gd-bs/components/badge";
    import { ISpinnerProps } from "gd-bs/components/spinner";
    
    /**
        * Button
        */
    export const Button: (props: IButtonProps) => IButton;
    
    /**
        * Button Types
        */
    export const ButtonTypes: IButtonTypes;
    
    /**
        * Button
        */
    export interface IButton {
            /** Destroys an element’s button. */
            dispose: () => void;
    
            /** The element. */
            el: Element;
    
            /** Hides the button. */
            hide: () => void;
    
            /** Updates the button text. */
            setText: (btnText?: string) => void;
    
            /** Updates the button type. */
            setType: (btnType: number) => void;
    
            /** Shows the button. */
            show: () => void;
    
            /** Toggles push state. Gives the button the appearance that it has been activated. */
            toggle: () => void;
    }
    
    /**
        * Button Properties
        */
    export interface IButtonProps {
            badge?: IBadgeProps;
            className?: string;
            controls?: Array<string>;
            data?: any;
            el?: Element | HTMLElement;
            href?: string;
            id?: string;
            isBlock?: boolean;
            isDisabled?: boolean;
            isExpanded?: boolean;
            isLarge?: boolean;
            isLink?: boolean;
            isOutline?: boolean;
            isSmall?: boolean;
            onClick?: (button?: IButtonProps, ev?: Event) => void;
            spinnerProps?: ISpinnerProps;
            target?: string;
            text?: string;
            title?: string;
            toggle?: string;
            trigger?: string;
            type?: number;
    }
    
    /**
        * Button Types
        */
    export type IButtonTypes = {
            Danger: number;
            Dark: number;
            Info: number;
            Light: number;
            Link: number;
            Primary: number;
            Secondary: number;
            Success: number;
            Warning: number;
    }
}

declare module 'gd-bs/components/buttonGroup' {
    import { IButtonProps } from "gd-bs/components";
    
    /**
        * Button Group
        */
    export const ButtonGroup: (props: IButtonGroupProps) => IButtonGroup;
    
    /**
        * Button Group
        */
    export interface IButtonGroup {
            /** The element. */
            el: Element;
    
            /** Hides the button group. */
            hide: () => void;
    
            /** Shows the button group. */
            show: () => void;
    }
    
    /**
        * Button Group Properties
        */
    export interface IButtonGroupProps {
            buttons?: Array<IButtonProps>;
            buttonType?: number;
            className?: string;
            el?: Element | HTMLElement;
            id?: string;
            isLarge?: boolean;
            isSmall?: boolean;
            isVertical?: boolean;
            label?: string;
    }
}

declare module 'gd-bs/components/card' {
    import { IButtonProps } from "gd-bs/components/button";
    import { INavProps } from "gd-bs/components/nav";
    
    /**
        * Card
        */
    export const Card: (props: ICardProps) => ICard;
    
    /**
        * Card
        */
    export interface ICard {
            /** Destroys an element’s card. */
            dispose: () => void;
    
            /** The element. */
            el: Element;
    
            /** Hides the card. */
            hide: () => void;
    
            /** Shows the card. */
            show: () => void;
    }
    
    /**
        * Card Action
        */
    export interface ICardAction {
            buttonType?: number;
            data?: any;
            onClick?: (action?: ICardAction, card?: ICardBody, ev?: Event) => void;
            href?: string;
            text?: string;
    }
    
    /**
        * Card Body
        */
    export interface ICardBody {
            actions?: Array<ICardAction>;
            className?: string;
            content?: string;
            data?: any;
            onClick?: (card?: ICardProps, ev?: Event) => void;
            onRender?: (el?: HTMLElement, card?: ICardBody) => void;
            subTitle?: string;
            text?: string;
            title?: string;
    }
    
    /**
        * Card Footer
        */
    export interface ICardFooter {
            className?: string;
            content?: string;
    }
    
    /**
        * Card Header
        */
    export interface ICardHeader {
            className?: string;
            content?: string;
            nav?: INavProps;
    }
    
    /**
        * Card Properties
        */
    export interface ICardProps {
            body?: Array<ICardBody>;
            className?: string;
            el?: Element | HTMLElement;
            footer?: ICardFooter;
            header?: ICardHeader;
            imgBottom?: {
                    alt?: string;
                    src?: string;
            }
            imgTop?: {
                    alt?: string;
                    src?: string;
            };
            onClick?: (card?: ICardBody, ev?: Event) => void;
    }
}

declare module 'gd-bs/components/cardGroup' {
    import { ICardProps } from "gd-bs/components";
    
    /**
        * Card Group
        */
    export const CardGroup: (props: ICardGroupProps) => ICardGroup;
    
    /**
        * Card Group
        */
    export interface ICardGroup {
            /** The element. */
            el: Element;
    
            /** Hides the card group. */
            hide: () => void;
    
            /** Shows the card group. */
            show: () => void;
    }
    
    /**
        * Card Group Properties
        */
    export interface ICardGroupProps {
            cards?: Array<ICardProps>;
            className?: string;
            el?: Element | HTMLElement;
            isDeck?: boolean;
    }
}

declare module 'gd-bs/components/carousel' {
    /**
        * Carousel
        */
    export const Carousel: (props: ICarouselProps) => ICarousel;
    
    /**
        * Carousel
        */
    export interface ICarousel {
            /**
                * Cycles through the carousel items from left to right.
                */
            cycle: () => void;
    
            /** Destroys an element’s tab. */
            dispose: () => void;
    
            /** The element. */
            el: Element;
    
            /** Hides the carousel. */
            hide: () => void;
    
            /**
                * Cycles to the next item.
                */
            next: () => void;
    
            /**
                * Cycles the carousel to a particular frame.
                * @prop value - The frame number.
                */
            number: (value: number) => void;
    
            /**
                * Stops the carousel from cycling through items.
                */
            pause: () => void;
    
            /**
                * Cycles to the previous item.
                */
            previous: () => void;
    
            /** Shows the carousel. */
            show: () => void;
    }
    
    /**
        * Carousel Item
        */
    export interface ICarouselItem {
            captions?: string;
            className?: string;
            content?: string;
            imageAlt?: string;
            imageUrl?: string;
            isActive?: boolean;
    }
    
    /**
        * Carousel Options
        */
    export interface ICarouselOptions {
            interval?: number | boolean;
            keyboard?: boolean;
            pause?: string | boolean;
            ride?: string;
            wrap?: boolean;
    }
    
    /**
        * Carousel Properties
        */
    export interface ICarouselProps {
            className?: string;
            el?: Element | HTMLElement;
            enableControls?: boolean;
            enableCrossfade?: boolean;
            enableIndicators?: boolean;
            id?: string;
            items?: Array<ICarouselItem>;
            options?: ICarouselOptions;
    }
}

declare module 'gd-bs/components/checkboxGroup' {
    /**
        * Checkbox Group
        */
    export const CheckboxGroup: (props: ICheckboxGroupProps) => ICheckboxGroup;
    
    /**
        * Checkbox Group Types
        */
    export const CheckboxGroupTypes: ICheckboxTypes;
    
    /**
        * Checkbox Group
        */
    export interface ICheckboxGroup {
            /** The checkbox element. */
            el: HTMLElement;
    
            /** Gets the values. */
            getValue: () => ICheckboxGroupItem | Array<ICheckboxGroupItem>;
    
            /** Hides the checkbox group. */
            hide: () => void;
    
            /** Shows the checkbox group. */
            show: () => void;
    }
    
    /**
        * Checkbox Group Item
        */
    export interface ICheckboxGroupItem {
            data?: any;
            isDisabled?: boolean;
            isSelected?: boolean;
            label?: string;
            name?: string;
            onChange?: (item: ICheckboxGroupItem) => void;
    }
    
    /**
        * Checkbox Group Properties
        */
    export interface ICheckboxGroupProps {
            className?: string;
            colSize?: number;
            el?: Element | HTMLElement;
            hideLabel?: boolean;
            isInline?: boolean;
            isReadonly?: boolean;
            label?: string;
            items?: Array<ICheckboxGroupItem>;
            multi?: boolean;
            onChange?: (items: ICheckboxGroupItem | Array<ICheckboxGroupItem>) => void;
            title?: string;
            type?: number;
            value?: any;
    }
    
    /**
        * Checkbox Group Types
        */
    export type ICheckboxTypes = {
            Checkbox: number;
            Radio: number;
            Switch: number;
    }
}

declare module 'gd-bs/components/collapse' {
    import { IButtonProps } from "gd-bs/components/button";
    
    /**
        * Collapse
        */
    export const Collapse: (props: ICollapseProps) => ICollapse;
    
    /**
        * Collapse
        */
    export interface ICollapse {
            /** Destroys an element’s collapse. */
            dispose: () => void;
    
            /** The element. */
            el: Element;
    
            /** Hides a collapsible element. */
            hide: () => void;
    
            /** Shows a collapsible element. */
            show: () => void;
    
            /** Toggles the collapsible element on invocation. */
            toggle: () => void;
    }
    
    /**
        * Collapse Options
        */
    export interface ICollapseOptions {
            parent?: string | Element;
            toggle?: boolean;
    }
    
    /**
        * Collapse Properties
        */
    export interface ICollapseProps {
            className?: string;
            content?: string;
            data?: any;
            el?: Element | HTMLElement;
            id?: string;
            isMulti?: boolean;
            onRender?: (props?: ICollapseProps, el?: HTMLElement) => void;
            options?: ICollapseOptions;
    }
}

declare module 'gd-bs/components/dropdown' {
    /**
        * Dropdown
        */
    export const Dropdown: (props: IDropdownProps) => IDropdown;
    
    /**
        * Dropdown Types
        */
    export const DropdownTypes: IDropdownTypes;
    
    /**
        * Dropdown
        */
    export interface IDropdown {
            /** Destroys an element’s dropdown. */
            dispose: () => void;
    
            /** The element. */
            el: Element;
    
            /** Gets the selected dropdown item(s). */
            getValue: () => IDropdownItem | Array<IDropdownItem>;
    
            /** Hides the dropdown. */
            hide: () => void;
    
            /** True if the dropdown is a multi-select. */
            isMulti: boolean;
    
            /** Updates the dropdown items. */
            setItems: (items: Array<IDropdownItem>) => void;
    
            /** Shows the dropdown. */
            show: () => void;
    
            /** Toggles the dropdown menu of a given navbar or tabbed navigation. */
            toggle: () => void;
    
            /** Updates the position of an element’s dropdown. */
            update: () => void;
    }
    
    /**
        * Dropdown Item
        */
    export interface IDropdownItem {
            className?: string;
            data?: any;
            href?: string;
            isDisabled?: boolean;
            isDivider?: boolean;
            isHeader?: boolean;
            isSelected?: boolean;
            onClick?: (item?: IDropdownItem, ev?: Event) => void;
            onRender?: (el: HTMLElement, item?: IDropdownItem) => void;
            text?: string;
            value?: string;
    }
    
    /**
        * Dropdown Properties
        */
    export interface IDropdownProps {
            className?: string;
            dropLeft?: boolean;
            dropRight?: boolean;
            dropUp?: boolean;
            el?: Element | HTMLElement;
            formFl?: boolean;
            id?: string;
            isReadonly?: boolean;
            isSplit?: boolean;
            items?: Array<IDropdownItem>;
            label?: string;
            menuOnly?: boolean;
            multi?: boolean;
            navFl?: boolean;
            onChange?: (item?: IDropdownItem | Array<IDropdownItem>, ev?: Event) => void;
            setLabelToValue?: boolean;
            title?: string;
            type?: number;
            value?: any;
    }
    
    /**
        * Dropdown Types
        */
    export type IDropdownTypes = {
            Danger: number;
            Info: number;
            Primary: number;
            Secondary: number;
            Success: number;
            Warning: number;
    }
}

declare module 'gd-bs/components/form' {
    import { IFormControl, IFormControlProps, IFormControlTypes } from "gd-bs/components/formControl";
    
    /**
        * Form
        */
    export const Form: (props: IFormProps) => IForm;
    
    /**
        * Form
        */
    export interface IForm {
            controls: Array<IFormControl>;
            el: HTMLFormElement;
            getControl: (name: string) => IFormControl;
            getValues: () => { [key: string]: any };
    
            /** Hides the form. */
            hide: () => void;
    
            isValid: () => boolean;
    
            /** Shows the form. */
            show: () => void;
    }
    
    /**
        * Form Column
        */
    export interface IFormColumn {
            control: IFormControlProps;
            size?: number;
    }
    
    /**
        * Form Properties
        */
    export interface IFormProps {
            className?: string;
            el?: Element | HTMLElement,
            rowClassName?: string;
            rows?: Array<IFormRow>;
            onControlRendering?: (control: IFormControlProps) => void | Promise<IFormControlProps>;
            onControlRendered?: (control: IFormControl) => void | Promise<IFormControl>;
            onRendered?: (controls: Array<IFormControl>) => void;
            value?: any;
    }
    
    /**
        * Form Row
        */
    export interface IFormRow {
            className?: string;
            isAutoSized?: boolean;
            isCentered?: boolean;
            control?: IFormControlProps;
            colSize?: number;
            columns?: Array<IFormColumn>;
    }
}

declare module 'gd-bs/components/formControl' {
    import { ICheckboxGroup, ICheckboxGroupItem } from "gd-bs/components/checkboxGroup";
    import { IDropdown, IDropdownItem } from "gd-bs/components/dropdown";
    import { IInputGroup } from "gd-bs/components/inputGroup";
    
    /**
        * Form Control
        */
    export const FormControl: (control: IFormControlProps) => IFormControl;
    
    /**
        * Form Control Types
        */
    export const FormControlTypes: IFormControlTypes;
    
    /**
        * Form Control
        */
    export interface IFormControl {
            el: HTMLElement;
            get: () => ICheckboxGroup | IDropdown | IInputGroup;
            getValue: () => any;
    
            /** Hides the form control. */
            hide: () => void;
    
            /** Shows the form control. */
            show: () => void;
    
            isValid: () => boolean;
            props: IFormControlProps;
    }
    
    /**
        * Form Control Properties
        */
    export interface IFormControlProps {
            className?: string;
            controlClassName?: string;
            data?: any;
            description?: string;
            el?: HTMLElement;
            errorMessage?: string;
            isReadonly?: boolean;
            isPlainText?: boolean;
            label?: string;
            loadingMessage?: string;
            name?: string;
            onControlRendering?: (control: IFormControlProps) => void | Promise<IFormControlProps>;
            onControlRendered?: (control: IFormControl) => void | Promise<IFormControl>;
            onGetValue?: (control: IFormControlProps) => any;
            onValidate?: (control: IFormControlProps, value: any) => boolean | IFormControlValidationResult;
            required?: boolean;
            title?: string;
            type?: number;
            value?: any;
    }
    
    /**
        * Form Control Properties - Checkbox
        */
    export interface IFormControlPropsCheckbox extends IFormControlProps {
            el?: HTMLInputElement;
            hideLabel?: boolean;
            isInline?: boolean;
            items?: Array<ICheckboxGroupItem>;
            multi?: boolean;
            onChange?: (item: Array<ICheckboxGroupItem>) => void;
    }
    
    /**
        * Form Control Properties - Dropdown
        */
    export interface IFormControlPropsDropdown extends IFormControlProps {
            items?: Array<IDropdownItem>;
            onChange?: (item: IDropdownItem | Array<IDropdownItem>) => void;
    }
    
    /**
        * Form Control Properties - Number Field
        */
    export interface IFormControlPropsNumberField extends IFormControlPropsTextField {
            max?: number;
            min?: number;
            step?: number;
    }
    
    /**
        * Form Control Properties - Range
        */
    export interface IFormControlPropsRange extends IFormControlPropsNumberField { }
    
    /**
        * Form Control Properties - Switch
        */
    export interface IFormControlPropsSwitch extends IFormControlPropsCheckbox { }
    
    /**
        * Form Control Properties - TextField
        */
    export interface IFormControlPropsTextField extends IFormControlProps {
            el?: HTMLInputElement;
            onChange?: (value: string) => void;
            placeholder?: string;
            rows?: number;
    }
    
    /**
        * Form Control Types
        */
    export type IFormControlTypes = {
            Checkbox: number;
            Email: number;
            Dropdown: number;
            File: number;
            MultiDropdown: number;
            Password: number;
            Radio: number;
            Range: number;
            Readonly: number;
            Switch: number;
            TextArea: number;
            TextField: number;
    }
    
    /**
        * Form Control Validation Result
        */
    export interface IFormControlValidationResult {
            invalidMessage?: string;
            isValid?: boolean;
            validMessage?: string;
    }
}

declare module 'gd-bs/components/inputGroup' {
    import { IButtonProps } from "gd-bs/components/button";
    
    /**
        * Input Group
        */
    export const InputGroup: (props: IInputGroupProps) => IInputGroup;
    
    /**
        * Input Group Types
        */
    export const InputGroupTypes: IInputGroupTypes;
    
    /**
        * Button Group
        */
    export interface IInputGroup {
            /** The element. */
            el: HTMLElement;
    
            /** Method to get the value. */
            getValue: () => string;
    
            /** Hides the input group. */
            hide: () => void;
    
            /** Method to set the value. */
            setValue: (value: string) => void;
    
            /** Shows the input group. */
            show: () => void;
    }
    
    /**
        * Input Group Properties
        */
    export interface IInputGroupProps {
            appendedButtons?: Array<IButtonProps>;
            appendedLabel?: string;
            className?: string;
            description?: string;
            el?: Element | HTMLElement;
            formFl?: boolean;
            id?: string;
            isLarge?: boolean;
            isPlainText?: boolean;
            isReadonly?: boolean;
            isSmall?: boolean;
            label?: string;
            max?: number;
            min?: number;
            onClear?: () => void;
            onChange?: (value?: string, ev?: Event) => void;
            placeholder?: string;
            prependedButtons?: Array<IButtonProps>;
            prependedLabel?: string;
            rows?: number;
            step?: number;
            title?: string;
            type?: number;
            value?: string;
    }
    
    /**
        * Input Group Types
        */
    export type IInputGroupTypes = {
            Email: number;
            File: number;
            Password: number;
            Range: number;
            Search: number;
            TextArea: number;
            TextField: number;
    }
}

declare module 'gd-bs/components/jumbotron' {
    /**
        * Jumbotron
        */
    export const Jumbotron: (props: IJumbotronProps) => IJumbotron;
    
    /**
        * Jumbotron
        */
    export interface IJumbotron {
            /** The element. */
            el: Element;
    
            /** Hides the jumbotron. */
            hide: () => void;
    
            /** Shows the jumbotron. */
            show: () => void;
    }
    
    /**
        * Jumbotron Properties
        */
    export interface IJumbotronProps {
            className?: string;
            content?: string;
            el?: Element | HTMLElement;
            isFluid?: boolean;
            lead?: string;
            onRenderContent?: (el?: HTMLElement) => void;
            title?: string;
    }
}

declare module 'gd-bs/components/listGroup' {
    import { IBadgeProps } from "gd-bs/components/badge";
    
    /**
        * List Group
        */
    export const ListGroup: (props: IListGroupProps) => IListGroup;
    
    /**
        * List Group Item Types
        */
    export const ListGroupItemTypes: IListGroupItemTypes;
    
    /**
        * List Group
        */
    export interface IListGroup {
            /** The element. */
            el: Element;
    
            /** Hides the list group. */
            hide: () => void;
    
            /**
                * Shows the list group, or specified tab content.
                * @prop elId - The tab id.
                */
            show: (tabId?: string) => void;
    }
    
    /**
        * List Group Item
        */
    export interface IListGroupItem {
            badge?: IBadgeProps;
            className?: string;
            content?: string;
            data?: any;
            href?: string;
            isActive?: boolean;
            isDisabled?: boolean;
            onClick?: (el?: HTMLElement, item?: IListGroupItem) => void;
            onRender?: (el?: HTMLElement, item?: IListGroupItem) => void;
            tabName?: string;
            type?: number;
    }
    
    /**
        * List Group Properties
        */
    export interface IListGroupProps {
            className?: string;
            colWidth?: number;
            el?: Element | HTMLElement;
            enableFade?: boolean;
            isFlush?: boolean;
            isTabs?: boolean;
            items?: Array<IListGroupItem>;
    }
    
    /**
        * List Group Item Types
        */
    export type IListGroupItemTypes = {
            Danger: number;
            Dark: number;
            Info: number;
            Light: number;
            Primary: number;
            Secondary: number;
            Success: number;
            Warning: number;
    }
}

declare module 'gd-bs/components/modal' {
    import { IButtonProps } from "gd-bs/components/button";
    
    /**
        * Modal
        */
    export const Modal: (props: IModalProps) => IModal;
    
    /**
        * Modal
        */
    export interface IModal {
            /** Destroys an element’s modal. */
            dispose: () => void;
    
            /** The element. */
            el: Element,
    
            /** Manually readjust the modal’s position if the height of a modal changes while it is open (i.e. in case a scrollbar appears). */
            handleUpdate: () => void;
    
            /** Manually hides a modal. */
            hide: () => void;
    
            /** Manually opens a modal. */
            show: () => void;
    
            /** Manually toggles a modal. */
            toggle: () => void;
    }
    
    /**
        * Modal Options
        */
    export interface IModalOptions {
            /** Includes a modal-backdrop element. Alternatively, specify static for a backdrop which doesn't close the modal on click. */
            backdrop: boolean | string;
    
            /** Puts the focus on the modal when initialized. */
            focus: boolean;
    
            /** Closes the modal when escape key is pressed. */
            keyboard: boolean;
    
            /** Shows the modal when initialized. */
            show: boolean;
    }
    
    /**
        * Modal Properties
        */
    export interface IModalProps {
            body?: string;
            button?: IButtonProps;
            className?: string;
            el?: Element | HTMLElement;
            disableFade?: boolean;
            footer?: string;
            hideCloseButton?: boolean;
            id?: string;
            isCentered?: boolean;
            isLarge?: boolean;
            isSmall?: boolean;
            onClose?: (el: HTMLDivElement) => void;
            onRenderBody?: (el: HTMLDivElement) => void;
            onRenderFooter?: (el: HTMLDivElement) => void;
            title?: string;
    }
}

declare module 'gd-bs/components/nav' {
    /**
        * Navigation
        */
    export const Nav: (props: INavProps) => INav;
    
    /**
        * Navigation
        */
    export interface INav {
            /** Destroys an element’s tab. */
            dispose: () => void;
    
            /** The element. */
            el: Element;
    
            /** Hides the navigation. */
            hide: () => void;
    
            /**
                * Shows the navigation or selects the given tab and shows its associated pane. Any other tab that was previously selected becomes unselected and its associated pane is hidden.
                * @prop selector - The query selector.
                */
            show: (selector?: string) => void;
    }
    
    /**
        * Navigation Properties
        */
    export interface INavProps {
            className?: string;
            data?: any;
            el?: Element | HTMLElement;
            enableFade?: boolean;
            enableFill?: boolean;
            id?: string;
            items?: Array<INavLink>;
            isJustified?: boolean;
            isPills?: boolean;
            isTabs?: boolean;
            isVertical?: boolean;
    }
    
    /**
        * Navigation Links
        */
    export interface INavLink {
            isActive?: boolean;
            isDisabled?: boolean;
            data?: any;
            href?: string;
            onClick?: (item?: INavLink, ev?: Event) => void;
            onRenderTab?: (item?: INavLink, el?: HTMLDivElement) => void;
            tabContent?: string;
            title?: string;
    }
}

declare module 'gd-bs/components/navbar' {
    import { IButtonProps } from "gd-bs/components/button";
    import { IDropdownItem } from "gd-bs/components/dropdown";
    
    /**
        * Navbar
        */
    export const Navbar: (props: INavbarProps) => INavbar;
    
    /**
        * Navbar Types
        */
    export const NavbarTypes: INavbarTypes;
    
    /**
        * Navbar
        */
    export interface INavbar {
            /** The element. */
            el: Element;
    
            /** Hides the nav bar. */
            hide: () => void;
    
            /** Shows the nav bar. */
            show: () => void;
    }
    
    /**
        * Navbar Item
        */
    export interface INavbarItem {
            href?: string;
            isActive?: boolean;
            isDisabled?: boolean;
            items?: Array<IDropdownItem>;
            onClick?: (item?: INavbarItem, ev?: Event) => void;
            text?: string;
    }
    
    /**
        * Navbar Properties
        */
    export interface INavbarProps {
            brand?: string;
            brandUrl?: string;
            className?: string;
            el?: Element | HTMLElement;
            enableSearch?: boolean;
            id?: string;
            items?: Array<INavbarItem>;
            onClick?: (item?: INavbarItem, ev?: Event) => void;
            searchBox?: INavbarSearchBox;
            type?: number;
    }
    
    /**
        * Navbar Types
        */
    export type INavbarTypes = {
            Dark: number;
            Light: number;
            Primary: number;
    }
    
    /**
        * Navbar Search Box
        */
    export interface INavbarSearchBox {
            btnType?: number;
            btnText?: string;
            hideButton?: boolean;
            onChange?: (value?: string) => void;
            onSearch?: (value?: string) => void;
            placeholder?: string;
    }
}

declare module 'gd-bs/components/pagination' {
    /**
        * Pagination
        */
    export const Pagination: (props: IPaginationProps) => IPagination;
    
    /**
        * Pagination Alignment
        */
    export const PaginationAlignment: IPaginationAlignment;
    
    /**
        * Pagination
        */
    export interface IPagination {
            /** The element. */
            el: Element;
    
            /** Hides the pagination. */
            hide: () => void;
    
            /** Shows the pagination. */
            show: () => void;
    }
    
    /**
        * Pagination Properties
        */
    export interface IPaginationProps {
            alignment?: number;
            className?: string;
            el?: Element;
            icon?: string;
            isLarge?: boolean;
            isSmall?: boolean;
            label?: string;
            numberOfPages?: number;
            onClick?: (pageNumber?: number, ev?: Event) => void;
    }
    
    /**
        * Pagination Alignment
        */
    export type IPaginationAlignment = {
            Centered: number;
            Left: number;
            Right: number;
    }
}

declare module 'gd-bs/components/panel' {
    import { IModal, IModalProps } from "gd-bs/components/modal";
    
    /**
        * Panel
        */
    export const Panel: (props: IPanelProps) => IPanel;
    
    /**
        * Panel Types
        */
    export const PanelTypes: IPanelTypes;
    
    /**
        * Panel
        */
    export interface IPanel {
            /** The element. */
            el: Element;
    
            /** The modal. */
            modal: IModal;
    
            /** Hides the panel. */
            hide: () => void;
    
            /** Shows the panel. */
            show: () => void;
    }
    
    /**
        * Panel Properties
        */
    export interface IPanelProps {
            className?: string;
            el?: Element | HTMLElement;
            modalProps?: IModalProps;
            type?: number;
    }
    
    /**
        * Panel Types
        */
    export type IPanelTypes = {
            Small: number;
            Medium: number;
            Large: number;
            XLarge: number;
            Full: number;
    }
}

declare module 'gd-bs/components/popover' {
    import { IButtonProps } from "gd-bs/components/button";
    
    /**
        * Popover
        */
    export const Popover: (props: IPopoverProps) => IPopover;
    
    /**
        * Popover Types
        */
    export const PopoverTypes: IPopoverTypes;
    
    /**
        * Popover
        */
    export interface IPopover {
            /** Destroys an element’s popover. */
            dispose: () => void;
    
            /** The element. */
            el: Element;
    
            /** Hides an element’s popover. */
            hide: () => void;
    
            /** Toggles an element's popover. */
            toggle: () => void;
    
            /** Toggles the ability for an element’s popover to be shown or hidden. */
            toggleEnabled: () => void;
    
            /** Reveals an element’s popover. */
            show: () => void;
    
            /** Updates the position of an element’s popover. */
            update: () => void;
    }
    
    /**
        * Popover Options
        */
    export interface IPopoverOptions {
            animation?: boolean;
            boundary?: string | Element;
            container?: string | Element | Function;
            content?: string | Element | Function;
            delay?: number | object;
            fallbackPlacement?: string | Array<string>;
            html?: boolean;
            offset?: number | string;
            placement?: string | Function;
            selector?: string;
            template?: string;
            title?: string | Element | Function;
            trigger?: string;
    }
    
    /**
        * Popover Properties
        */
    export interface IPopoverProps {
            btnProps?: IButtonProps;
            className?: string;
            el?: Element | HTMLElement;
            isDismissible?: boolean;
            options?: IPopoverOptions;
            target?: Element,
            type?: number;
    }
    
    /**
        * Popover Types
        */
    export type IPopoverTypes = {
            Auto: number;
            Bottom: number;
            Left: number;
            Right: number;
            Top: number;
    }
}

declare module 'gd-bs/components/progress' {
    /**
        * Progress
        */
    export const Progress: (props: IProgressProps) => IProgress;
    
    /**
        * Progress
        */
    export interface IProgress {
            /** The element. */
            el: Element;
    
            /** Hides the progress. */
            hide: () => void;
    
            /** Shows the progress. */
            show: () => void;
    }
    
    /**
        * Progress Properties
        */
    export interface IProgressProps {
            className?: string;
            el?: Element | HTMLElement;
            isAnimated?: boolean;
            isStriped?: boolean;
            label?: string;
            max?: number;
            min?: number;
            size?: number;
    }
}

declare module 'gd-bs/components/progressGroup' {
    import { IProgressProps } from "gd-bs/components/progress";
    
    /**
        * Progress Group
        */
    export const ProgressGroup: (props: IProgressGroupProps) => IProgressGroup;
    
    /**
        * Progress Group
        */
    export interface IProgressGroup {
            /** The element. */
            el: Element;
    
            /** Hides the progress group. */
            hide: () => void;
    
            /** Shows the progress group. */
            show: () => void;
    }
    
    /**
        * Progress Group Properties
        */
    export interface IProgressGroupProps {
            className?: string;
            el?: Element | HTMLElement;
            isMultiple?: boolean;
            progressbars?: Array<IProgressProps>;
    }
}

declare module 'gd-bs/components/spinner' {
    /**
        * Spinner
        */
    export const Spinner: (props: ISpinnerProps) => ISpinner;
    
    /**
        * Spinner Types
        */
    export const SpinnerTypes: ISpinnerTypes;
    
    /**
        * Spinner
        */
    export interface ISpinner {
            /** The element. */
            el: Element;
    
            /** Hides the spinner. */
            hide: () => void;
    
            /** Shows the spinner. */
            show: () => void;
    }
    
    /**
        * Spinner Properties
        */
    export interface ISpinnerProps {
            className?: string;
            el?: Element | HTMLElement;
            isGrowing?: boolean;
            isSmall?: boolean;
            text?: string;
            type?: number;
    }
    
    /**
        * Spinner Types
        */
    export type ISpinnerTypes = {
            Danger: number;
            Dark: number;
            Info: number;
            Light: number;
            Primary: number;
            Secondary: number;
            Success: number;
            Warning: number;
    }
}

declare module 'gd-bs/components/table' {
    /**
        * Table
        */
    export const Table: (props: ITableProps) => ITable
    
    /**
        * Table
        */
    export interface ITable {
            addRows(rows: Array<any>);
            el: HTMLTableElement;
    
            /** Hides the table. */
            hide: () => void;
    
            /** Shows the table. */
            show: () => void;
    }
    
    /**
        * Table Properties
        */
    export interface ITableProps {
            className?: string;
            columns?: Array<ITableColumn>;
            el?: Element | HTMLElement;
            onClickCell?: (el: HTMLTableDataCellElement, column?: ITableColumn, data?: any) => void;
            onClickHeader?: (el: HTMLTableHeaderCellElement, column?: ITableColumn) => void;
            onRenderCell?: (el?: HTMLTableDataCellElement, column?: ITableColumn, data?: any) => void;
            onRenderHeaderCell?: (el?: HTMLTableDataCellElement, column?: ITableColumn) => void;
            onRenderHeaderRow?: (el?: HTMLTableRowElement) => void;
            onRenderRow?: (el?: HTMLTableRowElement, data?: any) => void;
            rows?: Array<any>;
    }
    
    /**
        * Table Column
        */
    export interface ITableColumn {
            className?: string;
            data?: any;
            enableSort?: boolean;
            isHidden?: boolean;
            name: string;
            onClickCell?: (el: HTMLTableDataCellElement, column?: ITableColumn, data?: any) => void;
            onClickHeader?: (el: HTMLTableHeaderCellElement, column?: ITableColumn) => void;
            onRenderCell?: (el: HTMLTableDataCellElement, column?: ITableColumn, data?: any) => void;
            onRenderHeader?: (el?: HTMLTableDataCellElement, column?: ITableColumn) => void;
            scope?: string;
            title?: string;
    }
}

declare module 'gd-bs/components/toast' {
    /**
        * Toast
        */
    export const Toast: (props: IToastProps) => IToast;
    
    /**
        * Toast
        */
    export interface IToast {
            /** The component element. */
            el: HTMLElement;
    
            /** Hides the toast. */
            hide: () => void;
    
            /** Shows the toast. */
            show: () => void;
    }
    
    /**
        * Toast Properties
        */
    export interface IToastProps {
            bodyText?: string;
            className?: string;
            closeButtonHidden?: boolean;
            closeButtonText?: string;
            data?: any;
            el?: Element | HTMLElement;
            headerImgClass?: string;
            headerImgSrc?: string;
            headerText?: string;
            mutedText?: string;
            options?: IToastOptions;
            onClick?: (el?: HTMLElement, data?: any) => void;
            onRenderBody?: (el?: HTMLElement, data?: any) => void;
            onRenderHeader?: (el?: HTMLElement, data?: any) => void;
    }
    
    /**
        * Toast Options
        */
    export interface IToastOptions {
            animation?: boolean;
            autohide?: boolean;
            delay?: number;
    }
}

declare module 'gd-bs/components/toolbar' {
    import { IButtonProps } from "gd-bs/components/button";
    import { IInputGroupProps } from "gd-bs/components/inputGroup";
    
    /**
        * Toolbar
        */
    export const Toolbar: (props: IToolbarProps) => IToolbar;
    
    /**
        * Toolbar
        */
    export interface IToolbar {
            /** The element. */
            el: Element;
    
            /** Hides the toolbar. */
            hide: () => void;
    
            /** Shows the toolbar. */
            show: () => void;
    }
    
    /**
        * Toolbar Item
        */
    export interface IToolbarItem {
            buttons?: Array<IButtonProps>;
            buttonType?: number;
            inputGroup?: IInputGroupProps;
    }
    
    /**
        * Toolbar Properties
        */
    export interface IToolbarProps {
            className?: string;
            el?: Element | HTMLElement;
            items?: Array<IToolbarItem>;
            spacing?: number;
    }
}

declare module 'gd-bs/components/tooltip' {
    import { IButtonProps } from "gd-bs/components/button";
    
    /**
        * Tooltip
        */
    export const Tooltip: (props: ITooltipProps) => ITooltip;
    
    /**
        * Tooltip Types
        */
    export const TooltipTypes: ITooltipTypes;
    
    /**
        * Tooltip
        */
    export interface ITooltip {
            /** Destroys an element’s tooltip. */
            dispose: () => void;
    
            /** The element. */
            el: Element;
    
            /** Gives an element’s tooltip the ability to be shown. */
            enable: () => void;
    
            /** Hides an element’s tooltip. */
            hide: () => void;
    
            /** Toggles an element's tooltip. */
            toggle: () => void;
    
            /** Toggles the ability for an element’s tooltip to be shown or hidden. */
            toggleEnabled: () => void;
    
            /** Reveals an element’s tooltip. */
            show: () => void;
    
            /** Updates the position of an element’s tooltip. */
            update: () => void;
    }
    
    /**
        * Tooltip Options
        */
    export interface ITooltipOptions {
            animation?: boolean;
            boundary?: string;
            container?: string;
            delay?: number | object;
            fallbackPlacement?: string | Array<string>;
            html?: boolean;
            offset?: number | string;
            placement?: string | Function;
            selector?: string;
            template?: string;
            title?: string;
            trigger?: string;
    }
    
    /**
        * Tooltip Properties
        */
    export interface ITooltipProps {
            btnProps?: IButtonProps;
            className?: string;
            el?: Element | HTMLElement;
            options?: ITooltipOptions;
            type?: number;
    }
    
    /**
        * Tooltip Types
        */
    export type ITooltipTypes = {
            Auto: number;
            Bottom: number;
            Left: number;
            Right: number;
            Top: number;
    }
}

